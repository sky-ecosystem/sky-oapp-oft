/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
/**
 * This type is used to derive the {@link SetOFTConfigParams} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link SetOFTConfigParams} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type SetOFTConfigParamsRecord = {
  Admin: { fields: [web3.PublicKey] }
  Delegate: { fields: [web3.PublicKey] }
  DefaultFee: { fields: [number] }
  Paused: { fields: [boolean] }
  Pauser: { fields: [beet.COption<web3.PublicKey>] }
  Unpauser: { fields: [beet.COption<web3.PublicKey>] }
}

/**
 * Union type respresenting the SetOFTConfigParams data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isSetOFTConfigParams*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type SetOFTConfigParams =
  beet.DataEnumKeyAsKind<SetOFTConfigParamsRecord>

export const isSetOFTConfigParamsAdmin = (
  x: SetOFTConfigParams
): x is SetOFTConfigParams & { __kind: 'Admin' } => x.__kind === 'Admin'
export const isSetOFTConfigParamsDelegate = (
  x: SetOFTConfigParams
): x is SetOFTConfigParams & { __kind: 'Delegate' } => x.__kind === 'Delegate'
export const isSetOFTConfigParamsDefaultFee = (
  x: SetOFTConfigParams
): x is SetOFTConfigParams & { __kind: 'DefaultFee' } =>
  x.__kind === 'DefaultFee'
export const isSetOFTConfigParamsPaused = (
  x: SetOFTConfigParams
): x is SetOFTConfigParams & { __kind: 'Paused' } => x.__kind === 'Paused'
export const isSetOFTConfigParamsPauser = (
  x: SetOFTConfigParams
): x is SetOFTConfigParams & { __kind: 'Pauser' } => x.__kind === 'Pauser'
export const isSetOFTConfigParamsUnpauser = (
  x: SetOFTConfigParams
): x is SetOFTConfigParams & { __kind: 'Unpauser' } => x.__kind === 'Unpauser'

/**
 * @category userTypes
 * @category generated
 */
export const setOFTConfigParamsBeet = beet.dataEnum<SetOFTConfigParamsRecord>([
  [
    'Admin',
    new beet.BeetArgsStruct<SetOFTConfigParamsRecord['Admin']>(
      [['fields', beet.fixedSizeTuple([beetSolana.publicKey])]],
      'SetOFTConfigParamsRecord["Admin"]'
    ),
  ],
  [
    'Delegate',
    new beet.BeetArgsStruct<SetOFTConfigParamsRecord['Delegate']>(
      [['fields', beet.fixedSizeTuple([beetSolana.publicKey])]],
      'SetOFTConfigParamsRecord["Delegate"]'
    ),
  ],
  [
    'DefaultFee',
    new beet.BeetArgsStruct<SetOFTConfigParamsRecord['DefaultFee']>(
      [['fields', beet.fixedSizeTuple([beet.u16])]],
      'SetOFTConfigParamsRecord["DefaultFee"]'
    ),
  ],
  [
    'Paused',
    new beet.BeetArgsStruct<SetOFTConfigParamsRecord['Paused']>(
      [['fields', beet.fixedSizeTuple([beet.bool])]],
      'SetOFTConfigParamsRecord["Paused"]'
    ),
  ],
  [
    'Pauser',
    new beet.FixableBeetArgsStruct<SetOFTConfigParamsRecord['Pauser']>(
      [['fields', beet.tuple([beet.coption(beetSolana.publicKey)])]],
      'SetOFTConfigParamsRecord["Pauser"]'
    ),
  ],
  [
    'Unpauser',
    new beet.FixableBeetArgsStruct<SetOFTConfigParamsRecord['Unpauser']>(
      [['fields', beet.tuple([beet.coption(beetSolana.publicKey)])]],
      'SetOFTConfigParamsRecord["Unpauser"]'
    ),
  ],
]) as beet.FixableBeet<SetOFTConfigParams, SetOFTConfigParams>
