/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import { RateLimitParams, rateLimitParamsBeet } from './RateLimitParams'
/**
 * This type is used to derive the {@link PeerConfigParam} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link PeerConfigParam} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type PeerConfigParamRecord = {
  PeerAddress: { fields: [number[] /* size: 32 */] }
  FeeBps: { fields: [beet.COption<number>] }
  EnforcedOptions: { send: Uint8Array; sendAndCall: Uint8Array }
  OutboundRateLimit: { fields: [beet.COption<RateLimitParams>] }
  InboundRateLimit: { fields: [beet.COption<RateLimitParams>] }
}

/**
 * Union type respresenting the PeerConfigParam data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isPeerConfigParam*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type PeerConfigParam = beet.DataEnumKeyAsKind<PeerConfigParamRecord>

export const isPeerConfigParamPeerAddress = (
  x: PeerConfigParam
): x is PeerConfigParam & { __kind: 'PeerAddress' } =>
  x.__kind === 'PeerAddress'
export const isPeerConfigParamFeeBps = (
  x: PeerConfigParam
): x is PeerConfigParam & { __kind: 'FeeBps' } => x.__kind === 'FeeBps'
export const isPeerConfigParamEnforcedOptions = (
  x: PeerConfigParam
): x is PeerConfigParam & { __kind: 'EnforcedOptions' } =>
  x.__kind === 'EnforcedOptions'
export const isPeerConfigParamOutboundRateLimit = (
  x: PeerConfigParam
): x is PeerConfigParam & { __kind: 'OutboundRateLimit' } =>
  x.__kind === 'OutboundRateLimit'
export const isPeerConfigParamInboundRateLimit = (
  x: PeerConfigParam
): x is PeerConfigParam & { __kind: 'InboundRateLimit' } =>
  x.__kind === 'InboundRateLimit'

/**
 * @category userTypes
 * @category generated
 */
export const peerConfigParamBeet = beet.dataEnum<PeerConfigParamRecord>([
  [
    'PeerAddress',
    new beet.BeetArgsStruct<PeerConfigParamRecord['PeerAddress']>(
      [
        [
          'fields',
          beet.fixedSizeTuple([beet.uniformFixedSizeArray(beet.u8, 32)]),
        ],
      ],
      'PeerConfigParamRecord["PeerAddress"]'
    ),
  ],
  [
    'FeeBps',
    new beet.FixableBeetArgsStruct<PeerConfigParamRecord['FeeBps']>(
      [['fields', beet.tuple([beet.coption(beet.u16)])]],
      'PeerConfigParamRecord["FeeBps"]'
    ),
  ],

  [
    'EnforcedOptions',
    new beet.FixableBeetArgsStruct<PeerConfigParamRecord['EnforcedOptions']>(
      [
        ['send', beet.bytes],
        ['sendAndCall', beet.bytes],
      ],
      'PeerConfigParamRecord["EnforcedOptions"]'
    ),
  ],
  [
    'OutboundRateLimit',
    new beet.FixableBeetArgsStruct<PeerConfigParamRecord['OutboundRateLimit']>(
      [['fields', beet.tuple([beet.coption(rateLimitParamsBeet)])]],
      'PeerConfigParamRecord["OutboundRateLimit"]'
    ),
  ],
  [
    'InboundRateLimit',
    new beet.FixableBeetArgsStruct<PeerConfigParamRecord['InboundRateLimit']>(
      [['fields', beet.tuple([beet.coption(rateLimitParamsBeet)])]],
      'PeerConfigParamRecord["InboundRateLimit"]'
    ),
  ],
]) as beet.FixableBeet<PeerConfigParam, PeerConfigParam>
