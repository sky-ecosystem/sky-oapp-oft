/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * Unauthorized: ''
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'Unauthorized'
  constructor() {
    super('')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnauthorizedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new UnauthorizedError())
createErrorFromNameLookup.set('Unauthorized', () => new UnauthorizedError())

/**
 * InvalidSender: ''
 *
 * @category Errors
 * @category generated
 */
export class InvalidSenderError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidSender'
  constructor() {
    super('')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidSenderError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidSenderError())
createErrorFromNameLookup.set('InvalidSender', () => new InvalidSenderError())

/**
 * InvalidDecimals: ''
 *
 * @category Errors
 * @category generated
 */
export class InvalidDecimalsError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidDecimals'
  constructor() {
    super('')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidDecimalsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidDecimalsError())
createErrorFromNameLookup.set(
  'InvalidDecimals',
  () => new InvalidDecimalsError()
)

/**
 * SlippageExceeded: ''
 *
 * @category Errors
 * @category generated
 */
export class SlippageExceededError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'SlippageExceeded'
  constructor() {
    super('')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SlippageExceededError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new SlippageExceededError())
createErrorFromNameLookup.set(
  'SlippageExceeded',
  () => new SlippageExceededError()
)

/**
 * InvalidTokenDest: ''
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenDestError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InvalidTokenDest'
  constructor() {
    super('')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenDestError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new InvalidTokenDestError())
createErrorFromNameLookup.set(
  'InvalidTokenDest',
  () => new InvalidTokenDestError()
)

/**
 * RateLimitExceeded: ''
 *
 * @category Errors
 * @category generated
 */
export class RateLimitExceededError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'RateLimitExceeded'
  constructor() {
    super('')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RateLimitExceededError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new RateLimitExceededError())
createErrorFromNameLookup.set(
  'RateLimitExceeded',
  () => new RateLimitExceededError()
)

/**
 * InvalidFee: ''
 *
 * @category Errors
 * @category generated
 */
export class InvalidFeeError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'InvalidFee'
  constructor() {
    super('')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidFeeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new InvalidFeeError())
createErrorFromNameLookup.set('InvalidFee', () => new InvalidFeeError())

/**
 * InvalidMintAuthority: ''
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintAuthorityError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'InvalidMintAuthority'
  constructor() {
    super('')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new InvalidMintAuthorityError())
createErrorFromNameLookup.set(
  'InvalidMintAuthority',
  () => new InvalidMintAuthorityError()
)

/**
 * Paused: ''
 *
 * @category Errors
 * @category generated
 */
export class PausedError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'Paused'
  constructor() {
    super('')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PausedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new PausedError())
createErrorFromNameLookup.set('Paused', () => new PausedError())

/**
 * MaxPendingTwoLegSendMessagesExceeded: ''
 *
 * @category Errors
 * @category generated
 */
export class MaxPendingTwoLegSendMessagesExceededError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'MaxPendingTwoLegSendMessagesExceeded'
  constructor() {
    super('')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MaxPendingTwoLegSendMessagesExceededError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1779,
  () => new MaxPendingTwoLegSendMessagesExceededError()
)
createErrorFromNameLookup.set(
  'MaxPendingTwoLegSendMessagesExceeded',
  () => new MaxPendingTwoLegSendMessagesExceededError()
)

/**
 * InvalidTwoLegSendParamsHash: ''
 *
 * @category Errors
 * @category generated
 */
export class InvalidTwoLegSendParamsHashError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'InvalidTwoLegSendParamsHash'
  constructor() {
    super('')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTwoLegSendParamsHashError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177a,
  () => new InvalidTwoLegSendParamsHashError()
)
createErrorFromNameLookup.set(
  'InvalidTwoLegSendParamsHash',
  () => new InvalidTwoLegSendParamsHashError()
)

/**
 * InvalidTwoLegSendNonce: ''
 *
 * @category Errors
 * @category generated
 */
export class InvalidTwoLegSendNonceError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'InvalidTwoLegSendNonce'
  constructor() {
    super('')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTwoLegSendNonceError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new InvalidTwoLegSendNonceError())
createErrorFromNameLookup.set(
  'InvalidTwoLegSendNonce',
  () => new InvalidTwoLegSendNonceError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
