/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { SendParams, sendParamsBeet } from '../types/SendParams'

/**
 * @category Instructions
 * @category InitTwoLegSend
 * @category generated
 */
export type InitTwoLegSendInstructionArgs = {
  params: SendParams
}
/**
 * @category Instructions
 * @category InitTwoLegSend
 * @category generated
 */
export const initTwoLegSendStruct = new beet.FixableBeetArgsStruct<
  InitTwoLegSendInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['params', sendParamsBeet],
  ],
  'InitTwoLegSendInstructionArgs'
)
/**
 * Accounts required by the _initTwoLegSend_ instruction
 *
 * @property [**signer**] signer
 * @property [_writable_] peer
 * @property [_writable_] oftStore
 * @property [_writable_] tokenSource
 * @property [_writable_] tokenEscrow
 * @property [_writable_] tokenMint
 * @property [_writable_] twoLegSendPendingMessageStore
 * @category Instructions
 * @category InitTwoLegSend
 * @category generated
 */
export type InitTwoLegSendInstructionAccounts = {
  signer: web3.PublicKey
  peer: web3.PublicKey
  oftStore: web3.PublicKey
  tokenSource: web3.PublicKey
  tokenEscrow: web3.PublicKey
  tokenMint: web3.PublicKey
  tokenProgram?: web3.PublicKey
  twoLegSendPendingMessageStore: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const initTwoLegSendInstructionDiscriminator = [
  18, 219, 211, 184, 91, 244, 18, 123,
]

/**
 * Creates a _InitTwoLegSend_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitTwoLegSend
 * @category generated
 */
export function createInitTwoLegSendInstruction(
  accounts: InitTwoLegSendInstructionAccounts,
  args: InitTwoLegSendInstructionArgs,
  programId = new web3.PublicKey('E2R6qMMzLBjCwXs66MPEg2zKfpt5AMxWNgSULsLYfPS2')
) {
  const [data] = initTwoLegSendStruct.serialize({
    instructionDiscriminator: initTwoLegSendInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.peer,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.oftStore,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenSource,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenEscrow,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.twoLegSendPendingMessageStore,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
