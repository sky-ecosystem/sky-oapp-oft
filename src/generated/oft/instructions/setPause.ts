/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { SetPauseParams, setPauseParamsBeet } from '../types/SetPauseParams'

/**
 * @category Instructions
 * @category SetPause
 * @category generated
 */
export type SetPauseInstructionArgs = {
  params: SetPauseParams
}
/**
 * @category Instructions
 * @category SetPause
 * @category generated
 */
export const setPauseStruct = new beet.BeetArgsStruct<
  SetPauseInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['params', setPauseParamsBeet],
  ],
  'SetPauseInstructionArgs'
)
/**
 * Accounts required by the _setPause_ instruction
 *
 * @property [**signer**] signer
 * @property [_writable_] oftStore
 * @category Instructions
 * @category SetPause
 * @category generated
 */
export type SetPauseInstructionAccounts = {
  signer: web3.PublicKey
  oftStore: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const setPauseInstructionDiscriminator = [
  63, 32, 154, 2, 56, 103, 79, 45,
]

/**
 * Creates a _SetPause_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SetPause
 * @category generated
 */
export function createSetPauseInstruction(
  accounts: SetPauseInstructionAccounts,
  args: SetPauseInstructionArgs,
  programId = new web3.PublicKey('E2R6qMMzLBjCwXs66MPEg2zKfpt5AMxWNgSULsLYfPS2')
) {
  const [data] = setPauseStruct.serialize({
    instructionDiscriminator: setPauseInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.oftStore,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
