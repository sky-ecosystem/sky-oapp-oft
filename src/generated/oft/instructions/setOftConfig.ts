/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  SetOFTConfigParams,
  setOFTConfigParamsBeet,
} from '../types/SetOFTConfigParams'

/**
 * @category Instructions
 * @category SetOftConfig
 * @category generated
 */
export type SetOftConfigInstructionArgs = {
  params: SetOFTConfigParams
}
/**
 * @category Instructions
 * @category SetOftConfig
 * @category generated
 */
export const setOftConfigStruct = new beet.FixableBeetArgsStruct<
  SetOftConfigInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['params', setOFTConfigParamsBeet],
  ],
  'SetOftConfigInstructionArgs'
)
/**
 * Accounts required by the _setOftConfig_ instruction
 *
 * @property [**signer**] admin
 * @property [_writable_] oftStore
 * @category Instructions
 * @category SetOftConfig
 * @category generated
 */
export type SetOftConfigInstructionAccounts = {
  admin: web3.PublicKey
  oftStore: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const setOftConfigInstructionDiscriminator = [
  55, 126, 87, 217, 159, 66, 24, 194,
]

/**
 * Creates a _SetOftConfig_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SetOftConfig
 * @category generated
 */
export function createSetOftConfigInstruction(
  accounts: SetOftConfigInstructionAccounts,
  args: SetOftConfigInstructionArgs,
  programId = new web3.PublicKey('E2R6qMMzLBjCwXs66MPEg2zKfpt5AMxWNgSULsLYfPS2')
) {
  const [data] = setOftConfigStruct.serialize({
    instructionDiscriminator: setOftConfigInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.oftStore,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
