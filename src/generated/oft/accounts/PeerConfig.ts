/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { EnforcedOptions, enforcedOptionsBeet } from '../types/EnforcedOptions'
import { RateLimiter, rateLimiterBeet } from '../types/RateLimiter'

/**
 * Arguments used to create {@link PeerConfig}
 * @category Accounts
 * @category generated
 */
export type PeerConfigArgs = {
  peerAddress: number[] /* size: 32 */
  enforcedOptions: EnforcedOptions
  outboundRateLimiter: beet.COption<RateLimiter>
  inboundRateLimiter: beet.COption<RateLimiter>
  feeBps: beet.COption<number>
  bump: number
}

export const peerConfigDiscriminator = [181, 157, 86, 198, 33, 193, 94, 203]
/**
 * Holds the data for the {@link PeerConfig} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class PeerConfig implements PeerConfigArgs {
  private constructor(
    readonly peerAddress: number[] /* size: 32 */,
    readonly enforcedOptions: EnforcedOptions,
    readonly outboundRateLimiter: beet.COption<RateLimiter>,
    readonly inboundRateLimiter: beet.COption<RateLimiter>,
    readonly feeBps: beet.COption<number>,
    readonly bump: number
  ) {}

  /**
   * Creates a {@link PeerConfig} instance from the provided args.
   */
  static fromArgs(args: PeerConfigArgs) {
    return new PeerConfig(
      args.peerAddress,
      args.enforcedOptions,
      args.outboundRateLimiter,
      args.inboundRateLimiter,
      args.feeBps,
      args.bump
    )
  }

  /**
   * Deserializes the {@link PeerConfig} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [PeerConfig, number] {
    return PeerConfig.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link PeerConfig} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<PeerConfig> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find PeerConfig account at ${address}`)
    }
    return PeerConfig.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'E2R6qMMzLBjCwXs66MPEg2zKfpt5AMxWNgSULsLYfPS2'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, peerConfigBeet)
  }

  /**
   * Deserializes the {@link PeerConfig} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [PeerConfig, number] {
    return peerConfigBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link PeerConfig} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return peerConfigBeet.serialize({
      accountDiscriminator: peerConfigDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link PeerConfig} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: PeerConfigArgs) {
    const instance = PeerConfig.fromArgs(args)
    return peerConfigBeet.toFixedFromValue({
      accountDiscriminator: peerConfigDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link PeerConfig} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: PeerConfigArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      PeerConfig.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link PeerConfig} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      peerAddress: this.peerAddress,
      enforcedOptions: this.enforcedOptions,
      outboundRateLimiter: this.outboundRateLimiter,
      inboundRateLimiter: this.inboundRateLimiter,
      feeBps: this.feeBps,
      bump: this.bump,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const peerConfigBeet = new beet.FixableBeetStruct<
  PeerConfig,
  PeerConfigArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['peerAddress', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['enforcedOptions', enforcedOptionsBeet],
    ['outboundRateLimiter', beet.coption(rateLimiterBeet)],
    ['inboundRateLimiter', beet.coption(rateLimiterBeet)],
    ['feeBps', beet.coption(beet.u16)],
    ['bump', beet.u8],
  ],
  PeerConfig.fromArgs,
  'PeerConfig'
)
