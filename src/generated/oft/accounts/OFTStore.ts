/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { OFTType, oFTTypeBeet } from '../types/OFTType'

/**
 * Arguments used to create {@link OFTStore}
 * @category Accounts
 * @category generated
 */
export type OFTStoreArgs = {
  oftType: OFTType
  ld2sdRate: beet.bignum
  tokenMint: web3.PublicKey
  tokenEscrow: web3.PublicKey
  endpointProgram: web3.PublicKey
  bump: number
  tvlLd: beet.bignum
  admin: web3.PublicKey
  defaultFeeBps: number
  paused: boolean
  pauser: beet.COption<web3.PublicKey>
  unpauser: beet.COption<web3.PublicKey>
}

export const oFTStoreDiscriminator = [16, 145, 56, 83, 112, 209, 59, 255]
/**
 * Holds the data for the {@link OFTStore} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class OFTStore implements OFTStoreArgs {
  private constructor(
    readonly oftType: OFTType,
    readonly ld2sdRate: beet.bignum,
    readonly tokenMint: web3.PublicKey,
    readonly tokenEscrow: web3.PublicKey,
    readonly endpointProgram: web3.PublicKey,
    readonly bump: number,
    readonly tvlLd: beet.bignum,
    readonly admin: web3.PublicKey,
    readonly defaultFeeBps: number,
    readonly paused: boolean,
    readonly pauser: beet.COption<web3.PublicKey>,
    readonly unpauser: beet.COption<web3.PublicKey>
  ) {}

  /**
   * Creates a {@link OFTStore} instance from the provided args.
   */
  static fromArgs(args: OFTStoreArgs) {
    return new OFTStore(
      args.oftType,
      args.ld2sdRate,
      args.tokenMint,
      args.tokenEscrow,
      args.endpointProgram,
      args.bump,
      args.tvlLd,
      args.admin,
      args.defaultFeeBps,
      args.paused,
      args.pauser,
      args.unpauser
    )
  }

  /**
   * Deserializes the {@link OFTStore} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [OFTStore, number] {
    return OFTStore.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link OFTStore} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<OFTStore> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find OFTStore account at ${address}`)
    }
    return OFTStore.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'E2R6qMMzLBjCwXs66MPEg2zKfpt5AMxWNgSULsLYfPS2'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, oFTStoreBeet)
  }

  /**
   * Deserializes the {@link OFTStore} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [OFTStore, number] {
    return oFTStoreBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link OFTStore} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return oFTStoreBeet.serialize({
      accountDiscriminator: oFTStoreDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link OFTStore} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: OFTStoreArgs) {
    const instance = OFTStore.fromArgs(args)
    return oFTStoreBeet.toFixedFromValue({
      accountDiscriminator: oFTStoreDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link OFTStore} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: OFTStoreArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      OFTStore.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link OFTStore} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      oftType: 'OFTType.' + OFTType[this.oftType],
      ld2sdRate: (() => {
        const x = <{ toNumber: () => number }>this.ld2sdRate
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      tokenMint: this.tokenMint.toBase58(),
      tokenEscrow: this.tokenEscrow.toBase58(),
      endpointProgram: this.endpointProgram.toBase58(),
      bump: this.bump,
      tvlLd: (() => {
        const x = <{ toNumber: () => number }>this.tvlLd
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      admin: this.admin.toBase58(),
      defaultFeeBps: this.defaultFeeBps,
      paused: this.paused,
      pauser: this.pauser,
      unpauser: this.unpauser,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const oFTStoreBeet = new beet.FixableBeetStruct<
  OFTStore,
  OFTStoreArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['oftType', oFTTypeBeet],
    ['ld2sdRate', beet.u64],
    ['tokenMint', beetSolana.publicKey],
    ['tokenEscrow', beetSolana.publicKey],
    ['endpointProgram', beetSolana.publicKey],
    ['bump', beet.u8],
    ['tvlLd', beet.u64],
    ['admin', beetSolana.publicKey],
    ['defaultFeeBps', beet.u16],
    ['paused', beet.bool],
    ['pauser', beet.coption(beetSolana.publicKey)],
    ['unpauser', beet.coption(beetSolana.publicKey)],
  ],
  OFTStore.fromArgs,
  'OFTStore'
)
