/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import {
  TwoLegSendPendingMessage,
  twoLegSendPendingMessageBeet,
} from '../types/TwoLegSendPendingMessage'

/**
 * Arguments used to create {@link TwoLegSendPendingMessageStore}
 * @category Accounts
 * @category generated
 */
export type TwoLegSendPendingMessageStoreArgs = {
  queue: TwoLegSendPendingMessage[]
  lastNonceUsed: beet.bignum
}

export const twoLegSendPendingMessageStoreDiscriminator = [
  98, 55, 2, 186, 77, 77, 75, 35,
]
/**
 * Holds the data for the {@link TwoLegSendPendingMessageStore} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class TwoLegSendPendingMessageStore
  implements TwoLegSendPendingMessageStoreArgs
{
  private constructor(
    readonly queue: TwoLegSendPendingMessage[],
    readonly lastNonceUsed: beet.bignum
  ) {}

  /**
   * Creates a {@link TwoLegSendPendingMessageStore} instance from the provided args.
   */
  static fromArgs(args: TwoLegSendPendingMessageStoreArgs) {
    return new TwoLegSendPendingMessageStore(args.queue, args.lastNonceUsed)
  }

  /**
   * Deserializes the {@link TwoLegSendPendingMessageStore} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [TwoLegSendPendingMessageStore, number] {
    return TwoLegSendPendingMessageStore.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link TwoLegSendPendingMessageStore} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<TwoLegSendPendingMessageStore> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(
        `Unable to find TwoLegSendPendingMessageStore account at ${address}`
      )
    }
    return TwoLegSendPendingMessageStore.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'E2R6qMMzLBjCwXs66MPEg2zKfpt5AMxWNgSULsLYfPS2'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(
      programId,
      twoLegSendPendingMessageStoreBeet
    )
  }

  /**
   * Deserializes the {@link TwoLegSendPendingMessageStore} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(
    buf: Buffer,
    offset = 0
  ): [TwoLegSendPendingMessageStore, number] {
    return twoLegSendPendingMessageStoreBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link TwoLegSendPendingMessageStore} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return twoLegSendPendingMessageStoreBeet.serialize({
      accountDiscriminator: twoLegSendPendingMessageStoreDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link TwoLegSendPendingMessageStore} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: TwoLegSendPendingMessageStoreArgs) {
    const instance = TwoLegSendPendingMessageStore.fromArgs(args)
    return twoLegSendPendingMessageStoreBeet.toFixedFromValue({
      accountDiscriminator: twoLegSendPendingMessageStoreDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link TwoLegSendPendingMessageStore} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: TwoLegSendPendingMessageStoreArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      TwoLegSendPendingMessageStore.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link TwoLegSendPendingMessageStore} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      queue: this.queue,
      lastNonceUsed: (() => {
        const x = <{ toNumber: () => number }>this.lastNonceUsed
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const twoLegSendPendingMessageStoreBeet = new beet.FixableBeetStruct<
  TwoLegSendPendingMessageStore,
  TwoLegSendPendingMessageStoreArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['queue', beet.array(twoLegSendPendingMessageBeet)],
    ['lastNonceUsed', beet.u64],
  ],
  TwoLegSendPendingMessageStore.fromArgs,
  'TwoLegSendPendingMessageStore'
)
