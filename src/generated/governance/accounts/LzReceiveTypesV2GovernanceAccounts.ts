/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'

/**
 * Arguments used to create {@link LzReceiveTypesV2GovernanceAccounts}
 * @category Accounts
 * @category generated
 */
export type LzReceiveTypesV2GovernanceAccountsArgs = {
  governance: web3.PublicKey
  alts: web3.PublicKey[]
}

export const lzReceiveTypesV2GovernanceAccountsDiscriminator = [
  53, 238, 2, 214, 123, 225, 28, 194,
]
/**
 * Holds the data for the {@link LzReceiveTypesV2GovernanceAccounts} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class LzReceiveTypesV2GovernanceAccounts
  implements LzReceiveTypesV2GovernanceAccountsArgs
{
  private constructor(
    readonly governance: web3.PublicKey,
    readonly alts: web3.PublicKey[]
  ) {}

  /**
   * Creates a {@link LzReceiveTypesV2GovernanceAccounts} instance from the provided args.
   */
  static fromArgs(args: LzReceiveTypesV2GovernanceAccountsArgs) {
    return new LzReceiveTypesV2GovernanceAccounts(args.governance, args.alts)
  }

  /**
   * Deserializes the {@link LzReceiveTypesV2GovernanceAccounts} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [LzReceiveTypesV2GovernanceAccounts, number] {
    return LzReceiveTypesV2GovernanceAccounts.deserialize(
      accountInfo.data,
      offset
    )
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link LzReceiveTypesV2GovernanceAccounts} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<LzReceiveTypesV2GovernanceAccounts> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(
        `Unable to find LzReceiveTypesV2GovernanceAccounts account at ${address}`
      )
    }
    return LzReceiveTypesV2GovernanceAccounts.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('undefined')
  ) {
    return beetSolana.GpaBuilder.fromStruct(
      programId,
      lzReceiveTypesV2GovernanceAccountsBeet
    )
  }

  /**
   * Deserializes the {@link LzReceiveTypesV2GovernanceAccounts} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(
    buf: Buffer,
    offset = 0
  ): [LzReceiveTypesV2GovernanceAccounts, number] {
    return lzReceiveTypesV2GovernanceAccountsBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link LzReceiveTypesV2GovernanceAccounts} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return lzReceiveTypesV2GovernanceAccountsBeet.serialize({
      accountDiscriminator: lzReceiveTypesV2GovernanceAccountsDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link LzReceiveTypesV2GovernanceAccounts} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: LzReceiveTypesV2GovernanceAccountsArgs) {
    const instance = LzReceiveTypesV2GovernanceAccounts.fromArgs(args)
    return lzReceiveTypesV2GovernanceAccountsBeet.toFixedFromValue({
      accountDiscriminator: lzReceiveTypesV2GovernanceAccountsDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link LzReceiveTypesV2GovernanceAccounts} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: LzReceiveTypesV2GovernanceAccountsArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      LzReceiveTypesV2GovernanceAccounts.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link LzReceiveTypesV2GovernanceAccounts} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      governance: this.governance.toBase58(),
      alts: this.alts,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const lzReceiveTypesV2GovernanceAccountsBeet =
  new beet.FixableBeetStruct<
    LzReceiveTypesV2GovernanceAccounts,
    LzReceiveTypesV2GovernanceAccountsArgs & {
      accountDiscriminator: number[] /* size: 8 */
    }
  >(
    [
      ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
      ['governance', beetSolana.publicKey],
      ['alts', beet.array(beetSolana.publicKey)],
    ],
    LzReceiveTypesV2GovernanceAccounts.fromArgs,
    'LzReceiveTypesV2GovernanceAccounts'
  )
