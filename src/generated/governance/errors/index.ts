/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidGovernanceChain: 'InvalidGovernanceChain'
 *
 * @category Errors
 * @category generated
 */
export class InvalidGovernanceChainError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidGovernanceChain'
  constructor() {
    super('InvalidGovernanceChain')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidGovernanceChainError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidGovernanceChainError())
createErrorFromNameLookup.set(
  'InvalidGovernanceChain',
  () => new InvalidGovernanceChainError()
)

/**
 * InvalidGovernanceEmitter: 'InvalidGovernanceEmitter'
 *
 * @category Errors
 * @category generated
 */
export class InvalidGovernanceEmitterError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidGovernanceEmitter'
  constructor() {
    super('InvalidGovernanceEmitter')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidGovernanceEmitterError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidGovernanceEmitterError())
createErrorFromNameLookup.set(
  'InvalidGovernanceEmitter',
  () => new InvalidGovernanceEmitterError()
)

/**
 * InvalidGovernanceProgram: 'InvalidGovernanceProgram'
 *
 * @category Errors
 * @category generated
 */
export class InvalidGovernanceProgramError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidGovernanceProgram'
  constructor() {
    super('InvalidGovernanceProgram')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidGovernanceProgramError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidGovernanceProgramError())
createErrorFromNameLookup.set(
  'InvalidGovernanceProgram',
  () => new InvalidGovernanceProgramError()
)

/**
 * InvalidGovernanceMessage: 'InvalidGovernanceMessage'
 *
 * @category Errors
 * @category generated
 */
export class InvalidGovernanceMessageError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidGovernanceMessage'
  constructor() {
    super('InvalidGovernanceMessage')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidGovernanceMessageError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidGovernanceMessageError())
createErrorFromNameLookup.set(
  'InvalidGovernanceMessage',
  () => new InvalidGovernanceMessageError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
