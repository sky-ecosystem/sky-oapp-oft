/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * CpiAuthorityBumpMismatch: 'CpiAuthorityBumpMismatch'
 *
 * @category Errors
 * @category generated
 */
export class CpiAuthorityBumpMismatchError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'CpiAuthorityBumpMismatch'
  constructor() {
    super('CpiAuthorityBumpMismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CpiAuthorityBumpMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new CpiAuthorityBumpMismatchError())
createErrorFromNameLookup.set(
  'CpiAuthorityBumpMismatch',
  () => new CpiAuthorityBumpMismatchError()
)

/**
 * CpiAuthorityMismatch: 'CpiAuthorityMismatch'
 *
 * @category Errors
 * @category generated
 */
export class CpiAuthorityMismatchError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'CpiAuthorityMismatch'
  constructor() {
    super('CpiAuthorityMismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CpiAuthorityMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new CpiAuthorityMismatchError())
createErrorFromNameLookup.set(
  'CpiAuthorityMismatch',
  () => new CpiAuthorityMismatchError()
)

/**
 * InvalidGovernanceChain: 'InvalidGovernanceChain'
 *
 * @category Errors
 * @category generated
 */
export class InvalidGovernanceChainError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidGovernanceChain'
  constructor() {
    super('InvalidGovernanceChain')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidGovernanceChainError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidGovernanceChainError())
createErrorFromNameLookup.set(
  'InvalidGovernanceChain',
  () => new InvalidGovernanceChainError()
)

/**
 * InvalidGovernanceMessage: 'InvalidGovernanceMessage'
 *
 * @category Errors
 * @category generated
 */
export class InvalidGovernanceMessageError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidGovernanceMessage'
  constructor() {
    super('InvalidGovernanceMessage')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidGovernanceMessageError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidGovernanceMessageError())
createErrorFromNameLookup.set(
  'InvalidGovernanceMessage',
  () => new InvalidGovernanceMessageError()
)

/**
 * InvalidGovernanceModule: 'InvalidGovernanceModule'
 *
 * @category Errors
 * @category generated
 */
export class InvalidGovernanceModuleError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InvalidGovernanceModule'
  constructor() {
    super('InvalidGovernanceModule')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidGovernanceModuleError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new InvalidGovernanceModuleError())
createErrorFromNameLookup.set(
  'InvalidGovernanceModule',
  () => new InvalidGovernanceModuleError()
)

/**
 * InvalidGovernanceAction: 'InvalidGovernanceAction'
 *
 * @category Errors
 * @category generated
 */
export class InvalidGovernanceActionError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InvalidGovernanceAction'
  constructor() {
    super('InvalidGovernanceAction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidGovernanceActionError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new InvalidGovernanceActionError())
createErrorFromNameLookup.set(
  'InvalidGovernanceAction',
  () => new InvalidGovernanceActionError()
)

/**
 * InvalidInstruction: 'InvalidInstruction'
 *
 * @category Errors
 * @category generated
 */
export class InvalidInstructionError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'InvalidInstruction'
  constructor() {
    super('InvalidInstruction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidInstructionError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new InvalidInstructionError())
createErrorFromNameLookup.set(
  'InvalidInstruction',
  () => new InvalidInstructionError()
)

/**
 * Unauthorized: 'Unauthorized'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'Unauthorized'
  constructor() {
    super('Unauthorized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnauthorizedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new UnauthorizedError())
createErrorFromNameLookup.set('Unauthorized', () => new UnauthorizedError())

/**
 * InvalidAddressLookupTable: 'InvalidAddressLookupTable'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAddressLookupTableError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InvalidAddressLookupTable'
  constructor() {
    super('InvalidAddressLookupTable')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAddressLookupTableError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1778,
  () => new InvalidAddressLookupTableError()
)
createErrorFromNameLookup.set(
  'InvalidAddressLookupTable',
  () => new InvalidAddressLookupTableError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
