/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { LzReceiveParams, lzReceiveParamsBeet } from '../types/LzReceiveParams'

/**
 * @category Instructions
 * @category LzReceiveTypesWithAlt
 * @category generated
 */
export type LzReceiveTypesWithAltInstructionArgs = {
  params: LzReceiveParams
}
/**
 * @category Instructions
 * @category LzReceiveTypesWithAlt
 * @category generated
 */
export const lzReceiveTypesWithAltStruct = new beet.FixableBeetArgsStruct<
  LzReceiveTypesWithAltInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['params', lzReceiveParamsBeet],
  ],
  'LzReceiveTypesWithAltInstructionArgs'
)
/**
 * Accounts required by the _lzReceiveTypesWithAlt_ instruction
 *
 * @property [] governance
 * @property [] lzReceiveAlt
 * @property [] lookupTable
 * @property [] addressLookupTableProgram
 * @category Instructions
 * @category LzReceiveTypesWithAlt
 * @category generated
 */
export type LzReceiveTypesWithAltInstructionAccounts = {
  governance: web3.PublicKey
  lzReceiveAlt: web3.PublicKey
  lookupTable: web3.PublicKey
  addressLookupTableProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const lzReceiveTypesWithAltInstructionDiscriminator = [
  238, 226, 72, 5, 18, 65, 33, 176,
]

/**
 * Creates a _LzReceiveTypesWithAlt_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category LzReceiveTypesWithAlt
 * @category generated
 */
export function createLzReceiveTypesWithAltInstruction(
  accounts: LzReceiveTypesWithAltInstructionAccounts,
  args: LzReceiveTypesWithAltInstructionArgs,
  programId = new web3.PublicKey('EiQujD3MpwhznKZn4jSa9J7j6cHd7W9QA213QrPZgpR3')
) {
  const [data] = lzReceiveTypesWithAltStruct.serialize({
    instructionDiscriminator: lzReceiveTypesWithAltInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.governance,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.lzReceiveAlt,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.lookupTable,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.addressLookupTableProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
