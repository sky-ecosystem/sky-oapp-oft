/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { LzReceiveParams, lzReceiveParamsBeet } from '../types/LzReceiveParams'

/**
 * @category Instructions
 * @category LzReceiveTypesV2
 * @category generated
 */
export type LzReceiveTypesV2InstructionArgs = {
  params: LzReceiveParams
}
/**
 * @category Instructions
 * @category LzReceiveTypesV2
 * @category generated
 */
export const lzReceiveTypesV2Struct = new beet.FixableBeetArgsStruct<
  LzReceiveTypesV2InstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['params', lzReceiveParamsBeet],
  ],
  'LzReceiveTypesV2InstructionArgs'
)
/**
 * Accounts required by the _lzReceiveTypesV2_ instruction
 *
 * @property [] governance
 * @category Instructions
 * @category LzReceiveTypesV2
 * @category generated
 */
export type LzReceiveTypesV2InstructionAccounts = {
  governance: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const lzReceiveTypesV2InstructionDiscriminator = [
  109, 157, 200, 142, 138, 223, 159, 164,
]

/**
 * Creates a _LzReceiveTypesV2_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category LzReceiveTypesV2
 * @category generated
 */
export function createLzReceiveTypesV2Instruction(
  accounts: LzReceiveTypesV2InstructionAccounts,
  args: LzReceiveTypesV2InstructionArgs,
  programId = new web3.PublicKey('undefined')
) {
  const [data] = lzReceiveTypesV2Struct.serialize({
    instructionDiscriminator: lzReceiveTypesV2InstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.governance,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
