/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { SendOFTParams, sendOFTParamsBeet } from '../types/SendOFTParams'

/**
 * @category Instructions
 * @category SendOft
 * @category generated
 */
export type SendOftInstructionArgs = {
  params: SendOFTParams
}
/**
 * @category Instructions
 * @category SendOft
 * @category generated
 */
export const sendOftStruct = new beet.BeetArgsStruct<
  SendOftInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['params', sendOFTParamsBeet],
  ],
  'SendOftInstructionArgs'
)
/**
 * Accounts required by the _sendOft_ instruction
 *
 * @property [**signer**] admin
 * @property [] governance
 * @property [_writable_] tokenSource
 * @property [_writable_] tokenDest
 * @property [] tokenMint
 * @property [] instructionAcc
 * @category Instructions
 * @category SendOft
 * @category generated
 */
export type SendOftInstructionAccounts = {
  admin: web3.PublicKey
  governance: web3.PublicKey
  tokenSource: web3.PublicKey
  tokenDest: web3.PublicKey
  tokenMint: web3.PublicKey
  tokenProgram?: web3.PublicKey
  instructionAcc: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const sendOftInstructionDiscriminator = [
  123, 77, 113, 180, 51, 76, 244, 21,
]

/**
 * Creates a _SendOft_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SendOft
 * @category generated
 */
export function createSendOftInstruction(
  accounts: SendOftInstructionAccounts,
  args: SendOftInstructionArgs,
  programId = new web3.PublicKey('EiQujD3MpwhznKZn4jSa9J7j6cHd7W9QA213QrPZgpR3')
) {
  const [data] = sendOftStruct.serialize({
    instructionDiscriminator: sendOftInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.governance,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenSource,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenDest,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.instructionAcc,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
