/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  SetLzReceiveAltParams,
  setLzReceiveAltParamsBeet,
} from '../types/SetLzReceiveAltParams'

/**
 * @category Instructions
 * @category SetLzReceiveAlt
 * @category generated
 */
export type SetLzReceiveAltInstructionArgs = {
  params: SetLzReceiveAltParams
}
/**
 * @category Instructions
 * @category SetLzReceiveAlt
 * @category generated
 */
export const setLzReceiveAltStruct = new beet.BeetArgsStruct<
  SetLzReceiveAltInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['params', setLzReceiveAltParamsBeet],
  ],
  'SetLzReceiveAltInstructionArgs'
)
/**
 * Accounts required by the _setLzReceiveAlt_ instruction
 *
 * @property [_writable_, **signer**] admin
 * @property [_writable_] lzReceiveAlt
 * @property [] governance
 * @category Instructions
 * @category SetLzReceiveAlt
 * @category generated
 */
export type SetLzReceiveAltInstructionAccounts = {
  admin: web3.PublicKey
  lzReceiveAlt: web3.PublicKey
  governance: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const setLzReceiveAltInstructionDiscriminator = [
  73, 82, 199, 238, 174, 158, 241, 146,
]

/**
 * Creates a _SetLzReceiveAlt_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SetLzReceiveAlt
 * @category generated
 */
export function createSetLzReceiveAltInstruction(
  accounts: SetLzReceiveAltInstructionAccounts,
  args: SetLzReceiveAltInstructionArgs,
  programId = new web3.PublicKey('EiQujD3MpwhznKZn4jSa9J7j6cHd7W9QA213QrPZgpR3')
) {
  const [data] = setLzReceiveAltStruct.serialize({
    instructionDiscriminator: setLzReceiveAltInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.lzReceiveAlt,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governance,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
