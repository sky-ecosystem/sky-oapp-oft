/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
/**
 * This type is used to derive the {@link AddressOrAltIndex} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link AddressOrAltIndex} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type AddressOrAltIndexRecord = {
  Address: { fields: [web3.PublicKey] }
  AltIndex: { fields: [number, number] }
}

/**
 * Union type respresenting the AddressOrAltIndex data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isAddressOrAltIndex*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type AddressOrAltIndex = beet.DataEnumKeyAsKind<AddressOrAltIndexRecord>

export const isAddressOrAltIndexAddress = (
  x: AddressOrAltIndex
): x is AddressOrAltIndex & { __kind: 'Address' } => x.__kind === 'Address'
export const isAddressOrAltIndexAltIndex = (
  x: AddressOrAltIndex
): x is AddressOrAltIndex & { __kind: 'AltIndex' } => x.__kind === 'AltIndex'

/**
 * @category userTypes
 * @category generated
 */
export const addressOrAltIndexBeet = beet.dataEnum<AddressOrAltIndexRecord>([
  [
    'Address',
    new beet.BeetArgsStruct<AddressOrAltIndexRecord['Address']>(
      [['fields', beet.fixedSizeTuple([beetSolana.publicKey])]],
      'AddressOrAltIndexRecord["Address"]'
    ),
  ],
  [
    'AltIndex',
    new beet.BeetArgsStruct<AddressOrAltIndexRecord['AltIndex']>(
      [['fields', beet.fixedSizeTuple([beet.u8, beet.u8])]],
      'AddressOrAltIndexRecord["AltIndex"]'
    ),
  ],
]) as beet.FixableBeet<AddressOrAltIndex, AddressOrAltIndex>
