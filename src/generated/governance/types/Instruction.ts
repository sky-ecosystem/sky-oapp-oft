/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import { ALTAccountMeta, aLTAccountMetaBeet } from './ALTAccountMeta'
import { AddressOrAltIndex, addressOrAltIndexBeet } from './AddressOrAltIndex'
/**
 * This type is used to derive the {@link Instruction} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link Instruction} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type InstructionRecord = {
  LzReceive: { accounts: ALTAccountMeta[]; sendingTo: beet.COption<number> }
  Standard: {
    programId: AddressOrAltIndex
    accounts: ALTAccountMeta[]
    data: Uint8Array
    sendingTo: beet.COption<number>
  }
}

/**
 * Union type respresenting the Instruction data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isInstruction*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type Instruction = beet.DataEnumKeyAsKind<InstructionRecord>

export const isInstructionLzReceive = (
  x: Instruction
): x is Instruction & { __kind: 'LzReceive' } => x.__kind === 'LzReceive'
export const isInstructionStandard = (
  x: Instruction
): x is Instruction & { __kind: 'Standard' } => x.__kind === 'Standard'

/**
 * @category userTypes
 * @category generated
 */
export const instructionBeet = beet.dataEnum<InstructionRecord>([
  [
    'LzReceive',
    new beet.FixableBeetArgsStruct<InstructionRecord['LzReceive']>(
      [
        ['accounts', beet.array(aLTAccountMetaBeet)],
        ['sendingTo', beet.coption(beet.u32)],
      ],
      'InstructionRecord["LzReceive"]'
    ),
  ],

  [
    'Standard',
    new beet.FixableBeetArgsStruct<InstructionRecord['Standard']>(
      [
        ['programId', addressOrAltIndexBeet],
        ['accounts', beet.array(aLTAccountMetaBeet)],
        ['data', beet.bytes],
        ['sendingTo', beet.coption(beet.u32)],
      ],
      'InstructionRecord["Standard"]'
    ),
  ],
]) as beet.FixableBeet<Instruction, Instruction>
