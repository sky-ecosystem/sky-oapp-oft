// SPDX-License-Identifier: Apache-2.0
use crate::msg_codec::GovernanceMessage;
use crate::*;
use oapp::endpoint_cpi::{get_accounts_for_clear, LzAccount};
use oapp::{endpoint::ID as ENDPOINT_ID, LzReceiveParams};
/// LzReceiveTypes instruction provides a list of accounts that are used in the LzReceive
/// instruction. The list of accounts required by this LzReceiveTypes instruction can be found
/// from the specific PDA account that is generated by the LZ_RECEIVE_TYPES_SEED.
#[derive(Accounts)]
pub struct LzReceiveTypes<'info> {
    #[account(seeds = [GOVERNANCE_SEED, &governance.id.to_be_bytes()], bump = governance.bump)]
    pub governance: Account<'info, Governance>,
}

impl LzReceiveTypes<'_> {
    /// The list of accounts should follow the rules below:
    /// 1. Include all the accounts that are used in the LzReceive instruction, including the
    /// accounts that are used by the Endpoint program.
    /// 2. Set the account is a signer with ZERO address if the LzReceive instruction needs a payer
    /// to pay fee, like rent.
    /// 3. Set the account is writable if the LzReceive instruction needs to modify the account.
    pub fn apply(
        ctx: &Context<LzReceiveTypes>,
        params: &LzReceiveParams,
    ) -> Result<Vec<LzAccount>> {
        // There are two accounts that are used in the LzReceive instruction,
        // except those accounts for endpoint program.
        // The first account is the count account, that is the fixed one.
        let governance = ctx.accounts.governance.key();

        // The second account is the remote account, we find it by the params.src_eid.
        let seeds = [
            REMOTE_SEED,
            &governance.to_bytes(),
            &params.src_eid.to_be_bytes(),
        ];
        let (remote, _) = Pubkey::find_program_address(&seeds, ctx.program_id);
        let (cpi_authority, _) = Pubkey::find_program_address(&[CPI_AUTHORITY_SEED, &governance.to_bytes(), &GovernanceMessage::decode_origin_caller(&params.message).unwrap()], ctx.program_id);
        let (cpi_authority_config, _) = Pubkey::find_program_address(&[CPI_AUTHORITY_CONFIG_SEED, &governance.to_bytes(), &GovernanceMessage::decode_origin_caller(&params.message).unwrap()], ctx.program_id);

        let governance_message: GovernanceMessage = GovernanceMessage::from_bytes(&params.message)?;

        // accounts 0..6 (first 7 accounts)
        let mut accounts = vec![
            // payer
            LzAccount {
                pubkey: Pubkey::default(),
                is_signer: true,
                is_writable: true,
            },
            // governance
            LzAccount {
                pubkey: governance,
                is_signer: false,
                is_writable: true,
            },
            // remote
            LzAccount {
                pubkey: remote,
                is_signer: false,
                is_writable: false,
            },
            // cpi authority
            LzAccount {
                pubkey: cpi_authority,
                is_signer: false,
                is_writable: true,
            },
            // cpi authority config
            LzAccount {
                pubkey: cpi_authority_config,
                is_signer: false,
                is_writable: true,
            },
            // program
            LzAccount {
                pubkey: governance_message.program_id,
                is_signer: false,
                is_writable: false,
            },
            // system program
            LzAccount {
                pubkey: solana_program::system_program::ID,
                is_signer: false,
                is_writable: false,
            },
        ];

        // accounts 7..14 (8 accounts, last one #15)
        // Endpoint Clear instruction accounts
        let accounts_for_clear = get_accounts_for_clear(
            ENDPOINT_ID,
            &governance,
            params.src_eid,
            &params.sender,
            params.nonce,
        );
        accounts.extend(accounts_for_clear);

        // accounts 15..
        // Governance message instruction accounts
        accounts.extend(
            governance_message
                .accounts
                .iter()
                .map(|acc| LzAccount {
                    pubkey: if acc.pubkey == CPI_AUTHORITY_PLACEHOLDER {
                        cpi_authority
                    } else if acc.pubkey == PAYER_PLACEHOLDER {
                        Pubkey::default()
                    } else {
                        acc.pubkey
                    },
                    is_signer: false,
                    is_writable: acc.is_writable,
                }),
        );

        Ok(accounts)
    }
}
