{
  "address": "0x3C79fb16Cfc8fbBA101c44BbE0da22cb2DdD9715",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_addInitialValidTarget",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "_initialValidTargetSrcEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_initialValidTargetOriginCaller",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_initialValidTargetGovernedContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "GovernanceCallFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "InvalidAction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpointCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidGenericMessageLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governedContract",
          "type": "address"
        }
      ],
      "name": "InvalidGovernedContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMessageLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "InvalidOptions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTarget",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "NoPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughNative",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "OnlyEndpoint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        }
      ],
      "name": "OnlyPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedOriginCaller",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "EnforcedOptionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "name": "PeerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "ValidCallerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "ValidCallerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "srcEid",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "originCaller",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "governedContract",
          "type": "address"
        }
      ],
      "name": "ValidTargetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "srcEid",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "originCaller",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "governedContract",
          "type": "address"
        }
      ],
      "name": "ValidTargetRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SEND",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addValidCaller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_originCaller",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_governedContract",
          "type": "address"
        }
      ],
      "name": "addValidTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        }
      ],
      "name": "allowInitializePath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_msgType",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_extraOptions",
          "type": "bytes"
        }
      ],
      "name": "combineOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "msgType",
          "type": "uint16"
        }
      ],
      "name": "enforcedOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "enforcedOption",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isComposeMsgSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageOrigin",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "caller",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oAppVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "senderVersion",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "receiverVersion",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "originCaller",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "governedContract",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct GovernanceMessageEVMCodec.GovernanceMessage",
          "name": "_message",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_extraOptions",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        }
      ],
      "name": "quoteEVMAction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "fee",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_extraOptions",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        }
      ],
      "name": "quoteRawBytesAction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "fee",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeValidCaller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_originCaller",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_governedContract",
          "type": "address"
        }
      ],
      "name": "removeValidTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "originCaller",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "governedContract",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct GovernanceMessageEVMCodec.GovernanceMessage",
          "name": "_message",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_extraOptions",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "_fee",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_refundAddress",
          "type": "address"
        }
      ],
      "name": "sendEVMAction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lzTokenFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MessagingFee",
              "name": "fee",
              "type": "tuple"
            }
          ],
          "internalType": "struct MessagingReceipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_extraOptions",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "_fee",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_refundAddress",
          "type": "address"
        }
      ],
      "name": "sendRawBytesAction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lzTokenFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MessagingFee",
              "name": "fee",
              "type": "tuple"
            }
          ],
          "internalType": "struct MessagingReceipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "setEnforcedOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validCallers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "srcEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "originCaller",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "governedContract",
          "type": "address"
        }
      ],
      "name": "validTargets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf612958ce3dd9ca1f091a0d9e77605159be44428cda859789b0bf016a57a2a5",
  "receipt": {
    "to": null,
    "from": "0x0804a6e2798F42C7F3c97215DdF958d5500f8ec8",
    "contractAddress": "0x3C79fb16Cfc8fbBA101c44BbE0da22cb2DdD9715",
    "transactionIndex": 1,
    "gasUsed": "2365417",
    "logsBloom": "0x
    "blockHash": "0x98c96227a211cb09971b0657cb32b23f8ff6a279ff48f9c32f215275919cf720",
    "transactionHash": "0xdf612958ce3dd9ca1f091a0d9e77605159be44428cda859789b0bf016a57a2a5",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 44742201,
        "transactionHash": "0xdf612958ce3dd9ca1f091a0d9e77605159be44428cda859789b0bf016a57a2a5",
        "address": "0x3C79fb16Cfc8fbBA101c44BbE0da22cb2DdD9715",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000804a6e2798f42c7f3c97215ddf958d5500f8ec8"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x98c96227a211cb09971b0657cb32b23f8ff6a279ff48f9c32f215275919cf720"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 44742201,
        "transactionHash": "0xdf612958ce3dd9ca1f091a0d9e77605159be44428cda859789b0bf016a57a2a5",
        "address": "0x6EDCE65403992e310A62460808c4b910D972f10f",
        "topics": [
          "0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981"
        ],
        "data": "0x0000000000000000000000003c79fb16cfc8fbba101c44bbe0da22cb2ddd97150000000000000000000000000804a6e2798f42c7f3c97215ddf958d5500f8ec8",
        "logIndex": 15,
        "blockHash": "0x98c96227a211cb09971b0657cb32b23f8ff6a279ff48f9c32f215275919cf720"
      }
    ],
    "blockNumber": 44742201,
    "cumulativeGasUsed": "3184700",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6EDCE65403992e310A62460808c4b910D972f10f",
    "0x0804a6e2798F42C7F3c97215DdF958d5500f8ec8",
    false,
    "0",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "dc78cd0d1036936de9f478216bd11afb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_addInitialValidTarget\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"_initialValidTargetSrcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_initialValidTargetOriginCaller\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_initialValidTargetGovernedContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GovernanceCallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"InvalidAction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidGenericMessageLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governedContract\",\"type\":\"address\"}],\"name\":\"InvalidGovernedContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMessageLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"InvalidOptions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTarget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedOriginCaller\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"EnforcedOptionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ValidCallerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ValidCallerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"originCaller\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governedContract\",\"type\":\"address\"}],\"name\":\"ValidTargetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"originCaller\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governedContract\",\"type\":\"address\"}],\"name\":\"ValidTargetRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addValidCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_originCaller\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_governedContract\",\"type\":\"address\"}],\"name\":\"addValidTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"}],\"name\":\"combineOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"}],\"name\":\"enforcedOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"enforcedOption\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageOrigin\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"caller\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"originCaller\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"governedContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct GovernanceMessageEVMCodec.GovernanceMessage\",\"name\":\"_message\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"}],\"name\":\"quoteEVMAction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"}],\"name\":\"quoteRawBytesAction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeValidCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_originCaller\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_governedContract\",\"type\":\"address\"}],\"name\":\"removeValidTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"originCaller\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"governedContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct GovernanceMessageEVMCodec.GovernanceMessage\",\"name\":\"_message\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"_fee\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"}],\"name\":\"sendEVMAction\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct MessagingReceipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"_fee\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"}],\"name\":\"sendRawBytesAction\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct MessagingReceipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"setEnforcedOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validCallers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"originCaller\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"governedContract\",\"type\":\"address\"}],\"name\":\"validTargets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"addValidCaller(address)\":{\"params\":{\"_address\":\"The address to add to the valid caller list.\"}},\"addValidTarget(uint32,bytes32,address)\":{\"params\":{\"_governedContract\":\"The governed contract address.\",\"_originCaller\":\"The origin caller address (as bytes32).\",\"_srcEid\":\"The source endpoint ID.\"}},\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"combineOptions(uint32,uint16,bytes)\":{\"details\":\"If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_extraOptions\":\"Additional options passed by the caller.\",\"_msgType\":\"The OAPP message type.\"},\"returns\":{\"_0\":\"options The combination of caller specified options AND enforced options.\"}},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"nextNonce(uint32,bytes32)\":{\"details\":\"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\",\"returns\":{\"nonce\":\"The next nonce.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol implementation.\",\"senderVersion\":\"The version of the OAppSender.sol implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeValidCaller(address)\":{\"params\":{\"_address\":\"The address to remove from the valid caller list.\"}},\"removeValidTarget(uint32,bytes32,address)\":{\"params\":{\"_governedContract\":\"The governed contract address.\",\"_originCaller\":\"The origin caller address (as bytes32).\",\"_srcEid\":\"The source endpoint ID.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setEnforcedOptions((uint32,uint16,bytes)[])\":{\"details\":\"Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\",\"params\":{\"_enforcedOptions\":\"An array of EnforcedOptionParam structures specifying enforced options.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addValidCaller(address)\":{\"notice\":\"Adds an address to the valid caller list.\"},\"addValidTarget(uint32,bytes32,address)\":{\"notice\":\"Adds a specific (srcEid, originCaller, governedContract) combination to the valid target list.\"},\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"combineOptions(uint32,uint16,bytes)\":{\"notice\":\"Combines options for a given endpoint and message type.\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Retrieves the next nonce for a given source endpoint and sender address.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"removeValidCaller(address)\":{\"notice\":\"Removes an address from the valid caller list.\"},\"removeValidTarget(uint32,bytes32,address)\":{\"notice\":\"Removes a specific (srcEid, originCaller, governedContract) combination from the valid target list.\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GovernanceControllerOApp.sol\":\"GovernanceControllerOApp\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary AddressCast {\\n    error AddressCast_InvalidSizeForAddress();\\n    error AddressCast_InvalidAddress();\\n\\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\\n        if (_addressBytes.length > 32) revert AddressCast_InvalidAddress();\\n        result = bytes32(_addressBytes);\\n        unchecked {\\n            uint256 offset = 32 - _addressBytes.length;\\n            result = result >> (offset * 8);\\n        }\\n    }\\n\\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\\n        result = bytes32(uint256(uint160(_address)));\\n    }\\n\\n    function toBytes(bytes32 _addressBytes32, uint256 _size) internal pure returns (bytes memory result) {\\n        if (_size == 0 || _size > 32) revert AddressCast_InvalidSizeForAddress();\\n        result = new bytes(_size);\\n        unchecked {\\n            uint256 offset = 256 - _size * 8;\\n            assembly {\\n                mstore(add(result, 32), shl(offset, _addressBytes32))\\n            }\\n        }\\n    }\\n\\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\\n        result = address(uint160(uint256(_addressBytes32)));\\n    }\\n\\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\\n        if (_addressBytes.length != 20) revert AddressCast_InvalidAddress();\\n        result = address(bytes20(_addressBytes));\\n    }\\n}\\n\",\"keccak256\":\"0x2ebbcaaab3554edcd41b581f1a72ac1806afbfb8047d0d47ff098f9af30d6deb\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Struct representing enforced option parameters.\\n */\\nstruct EnforcedOptionParam {\\n    uint32 eid; // Endpoint ID\\n    uint16 msgType; // Message Type\\n    bytes options; // Additional options\\n}\\n\\n/**\\n * @title IOAppOptionsType3\\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\\n */\\ninterface IOAppOptionsType3 {\\n    // Custom error message for invalid options\\n    error InvalidOptions(bytes options);\\n\\n    // Event emitted when enforced options are set\\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\\n\\n    /**\\n     * @notice Sets enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OApp message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) external view returns (bytes memory options);\\n}\\n\",\"keccak256\":\"0x9fc08a51e9d7c9c710c4eb26f84fe77228305ad7da63fa486ff24ebf2f3bc461\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppOptionsType3, EnforcedOptionParam } from \\\"../interfaces/IOAppOptionsType3.sol\\\";\\n\\n/**\\n * @title OAppOptionsType3\\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\\n */\\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\\n    uint16 internal constant OPTION_TYPE_3 = 3;\\n\\n    // @dev The \\\"msgType\\\" should be defined in the child contract.\\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\\n        _setEnforcedOptions(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function _setEnforcedOptions(EnforcedOptionParam[] memory _enforcedOptions) internal virtual {\\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\\n            _assertOptionsType3(_enforcedOptions[i].options);\\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\\n        }\\n\\n        emit EnforcedOptionSet(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OAPP message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     *\\n     * @dev If there is an enforced lzReceive option:\\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) public view virtual returns (bytes memory) {\\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\\n\\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\\n        if (enforced.length == 0) return _extraOptions;\\n\\n        // No caller options, return enforced\\n        if (_extraOptions.length == 0) return enforced;\\n\\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\\n        if (_extraOptions.length >= 2) {\\n            _assertOptionsType3(_extraOptions);\\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\\n            return bytes.concat(enforced, _extraOptions[2:]);\\n        }\\n\\n        // No valid set of options was found.\\n        revert InvalidOptions(_extraOptions);\\n    }\\n\\n    /**\\n     * @dev Internal function to assert that options are of type 3.\\n     * @param _options The options to be checked.\\n     */\\n    function _assertOptionsType3(bytes memory _options) internal pure virtual {\\n        uint16 optionsType;\\n        assembly {\\n            optionsType := mload(add(_options, 2))\\n        }\\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\\n    }\\n}\\n\",\"keccak256\":\"0x5275636cd47e660a2fdf6c7fe9d41ff3cc866b785cc8a9d88c1b8ca983509f01\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/GovernanceControllerOApp.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { OApp, MessagingFee, Origin } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\\\";\\nimport { MessagingReceipt } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\\\";\\nimport { OAppOptionsType3 } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\\\";\\nimport { AddressCast } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\\\";\\n\\nimport { GovernanceMessageEVMCodec } from \\\"./GovernanceMessageEVMCodec.sol\\\";\\nimport { GovernanceMessageGenericCodec } from \\\"./GovernanceMessageGenericCodec.sol\\\";\\nimport { IGovernanceController, GovernanceOrigin } from \\\"./IGovernanceController.sol\\\";\\n\\ncontract GovernanceControllerOApp is OApp, OAppOptionsType3, IGovernanceController, ReentrancyGuard {\\n    // @notice Msg types that are used to identify the various OApp operations.\\n    // @dev This can be extended in child contracts for non-default OApp operations\\n    // @dev These values are used in things like combineOptions() in OAppOptionsType3.sol.\\n    uint16 public constant SEND = 1;\\n\\n    // a temporary variable to store the origin caller and expose it to governed contract\\n    GovernanceOrigin public messageOrigin;\\n\\n    error GovernanceCallFailed();\\n    error UnauthorizedOriginCaller();\\n    error InvalidCaller();\\n    error InvalidGovernedContract(address _governedContract);\\n    error InvalidTarget();\\n\\n    // addresses allowed to send messages\\n    mapping(address => bool) public validCallers;\\n\\n    // origin callers allowed to call specific governed contracts\\n    mapping(uint32 srcEid => mapping(bytes32 originCaller => mapping(address governedContract => bool allowed))) public validTargets;\\n\\n    event ValidCallerAdded(address indexed _address);\\n    event ValidCallerRemoved(address indexed _address);\\n    event ValidTargetAdded(uint32 indexed srcEid, bytes32 indexed originCaller, address indexed governedContract);\\n    event ValidTargetRemoved(uint32 indexed srcEid, bytes32 indexed originCaller, address indexed governedContract);\\n\\n    constructor(\\n        address _endpoint, \\n        address _delegate, \\n        bool _addInitialValidTarget,\\n        uint32 _initialValidTargetSrcEid,\\n        bytes32 _initialValidTargetOriginCaller,\\n        address _initialValidTargetGovernedContract\\n    ) OApp(_endpoint, _delegate) Ownable(_delegate) {\\n        if (_addInitialValidTarget) {\\n            // @dev (Optional) Add the initial pair to the valid targets to avoid chicken-and-egg problem\\n            // if the governance self-governs itself via governance messages\\n            validTargets[_initialValidTargetSrcEid][_initialValidTargetOriginCaller][_initialValidTargetGovernedContract] = true;\\n            emit ValidTargetAdded(_initialValidTargetSrcEid, _initialValidTargetOriginCaller, _initialValidTargetGovernedContract);\\n        }\\n    }\\n\\n    modifier onlyValidCaller() {\\n        if (!validCallers[msg.sender]) revert InvalidCaller();\\n        _;\\n    }\\n\\n    // [---- EXTERNAL METHODS ----]\\n\\n    function sendEVMAction(\\n        GovernanceMessageEVMCodec.GovernanceMessage calldata _message,\\n        uint32 _dstEid,\\n        bytes calldata _extraOptions,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    ) external payable onlyValidCaller returns (MessagingReceipt memory receipt) {\\n        return _sendEVMAction(_message, _dstEid, _extraOptions, _fee, _refundAddress);\\n    }\\n\\n    // @dev This method disregards the valid callers check.\\n    function quoteEVMAction(\\n        GovernanceMessageEVMCodec.GovernanceMessage calldata _message,\\n        uint32 _dstEid,\\n        bytes calldata _extraOptions,\\n        bool _payInLzToken\\n    ) external view returns (MessagingFee memory fee) {\\n        (bytes memory message, bytes memory options) = _buildMsgAndOptionsEVMAction(_message, _dstEid, _extraOptions);\\n\\n        return _quote(_dstEid, message, options, _payInLzToken);\\n    }\\n\\n    // @notice This method can be used when compiling and serializing governance message offchain\\n    function sendRawBytesAction(\\n        bytes calldata _message,\\n        uint32 _dstEid,\\n        bytes calldata _extraOptions,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    ) external payable onlyValidCaller returns (MessagingReceipt memory receipt) {\\n        return _sendRawBytesAction(_message, _dstEid, _extraOptions, _fee, _refundAddress);\\n    }\\n\\n    // @dev This method disregards the valid callers check.\\n    function quoteRawBytesAction(\\n        bytes calldata _message,\\n        uint32 _dstEid,\\n        bytes calldata _extraOptions,\\n        bool _payInLzToken\\n    ) external view returns (MessagingFee memory fee) {\\n        bytes memory options = combineOptions(_dstEid, SEND, _extraOptions);\\n\\n        return _quote(_dstEid, _message, options, _payInLzToken);\\n    }\\n\\n    // [---- VALID CALLER MANAGEMENT ----]\\n    /**\\n     * @notice Adds an address to the valid caller list.\\n     * @param _address The address to add to the valid caller list.\\n     */\\n    function addValidCaller(address _address) external onlyOwner {\\n        validCallers[_address] = true;\\n        emit ValidCallerAdded(_address);\\n    }\\n\\n    /**\\n     * @notice Removes an address from the valid caller list.\\n     * @param _address The address to remove from the valid caller list.\\n     */\\n    function removeValidCaller(address _address) external onlyOwner {\\n        validCallers[_address] = false;\\n        emit ValidCallerRemoved(_address);\\n    }\\n\\n    // [---- VALID TARGET MANAGEMENT ----]\\n\\n    /**\\n     * @notice Adds a specific (srcEid, originCaller, governedContract) combination to the valid target list.\\n     * @param _srcEid The source endpoint ID.\\n     * @param _originCaller The origin caller address (as bytes32).\\n     * @param _governedContract The governed contract address.\\n     */\\n    function addValidTarget(\\n        uint32 _srcEid,\\n        bytes32 _originCaller,\\n        address _governedContract\\n    ) external onlyOwner {\\n        validTargets[_srcEid][_originCaller][_governedContract] = true;\\n        emit ValidTargetAdded(_srcEid, _originCaller, _governedContract);\\n    }\\n\\n    /**\\n     * @notice Removes a specific (srcEid, originCaller, governedContract) combination from the valid target list.\\n     * @param _srcEid The source endpoint ID.\\n     * @param _originCaller The origin caller address (as bytes32).\\n     * @param _governedContract The governed contract address.\\n     */\\n    function removeValidTarget(\\n        uint32 _srcEid,\\n        bytes32 _originCaller,\\n        address _governedContract\\n    ) external onlyOwner {\\n        validTargets[_srcEid][_originCaller][_governedContract] = false;\\n        emit ValidTargetRemoved(_srcEid, _originCaller, _governedContract);\\n    }\\n\\n    // [---- INTERNAL METHODS ----]\\n\\n    function _sendEVMAction(\\n        GovernanceMessageEVMCodec.GovernanceMessage calldata _message,\\n        uint32 _dstEid,\\n        bytes calldata _extraOptions,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory msgReceipt) {\\n        if (_message.originCaller != AddressCast.toBytes32(msg.sender)) {\\n            revert UnauthorizedOriginCaller();\\n        }\\n\\n        (bytes memory message, bytes memory options) = _buildMsgAndOptionsEVMAction(_message, _dstEid, _extraOptions);\\n\\n        msgReceipt = _lzSend(_dstEid, message, options, _fee, _refundAddress);\\n    }\\n\\n    function _buildMsgAndOptionsEVMAction(\\n        GovernanceMessageEVMCodec.GovernanceMessage calldata _message,\\n        uint32 _dstEid,\\n        bytes calldata _extraOptions\\n    ) internal view virtual returns (bytes memory message, bytes memory options) {\\n        message = GovernanceMessageEVMCodec.encode(_message);\\n        options = combineOptions(_dstEid, SEND, _extraOptions);\\n    }\\n\\n    function _sendRawBytesAction(\\n        bytes calldata _message,\\n        uint32 _dstEid,\\n        bytes calldata _extraOptions,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory msgReceipt) {\\n        GovernanceMessageGenericCodec.assertValidMessageLength(_message);\\n\\n        if (GovernanceMessageGenericCodec.originCaller(_message) != AddressCast.toBytes32(msg.sender)) {\\n            revert UnauthorizedOriginCaller();\\n        }\\n\\n        bytes memory options = combineOptions(_dstEid, SEND, _extraOptions);\\n\\n        msgReceipt = _lzSend(_dstEid, _message, options, _fee, _refundAddress);\\n    }\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Receive business logic\\n    //\\n    // Override _lzReceive to decode the incoming bytes\\n    // The base OAppReceiver.lzReceive ensures:\\n    //   \\u2022 Only the LayerZero Endpoint can call this method\\n    //   \\u2022 The sender is a registered peer (peers[srcEid] == origin.sender)\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /// @notice Invoked when EndpointV2.lzReceive is called\\n    /// @notice Can be called by anyone with any msg.value\\n    /// message needs to be verified first by the Security Stack\\n    /// msg.value (if used) should be validated by the governed contract\\n    /// \\n    /// @notice this function is retryable but not replayable\\n    ///\\n    /// @dev   origin     Metadata (source chain, sender address, nonce)\\n    /// @dev   _guid      Global unique ID for tracking this message\\n    /// @param payload    Encoded bytes of GovernanceMessage\\n    /// @dev   _executor  Executor address that delivered the message\\n    /// @dev   _extraData Additional data from the Executor (unused here)\\n    function _lzReceive(\\n        Origin calldata origin,\\n        bytes32 /*_guid*/,\\n        bytes calldata payload,\\n        address /*_executor*/,\\n        bytes calldata /*_extraData*/\\n    ) internal override nonReentrant {\\n        GovernanceMessageEVMCodec.GovernanceMessage memory message = GovernanceMessageEVMCodec.decode(payload);\\n\\n        address lzToken = endpoint.lzToken();\\n        if (message.governedContract == address(endpoint) || (lzToken != address(0) && message.governedContract == lzToken)) {\\n            revert InvalidGovernedContract(message.governedContract);\\n        }\\n\\n        if (!validTargets[origin.srcEid][message.originCaller][message.governedContract]) {\\n            revert InvalidTarget();\\n        }\\n\\n        // @dev This is a temporary variable to store the origin caller and expose it to the governed contract.\\n        messageOrigin = GovernanceOrigin({ eid: origin.srcEid, caller: message.originCaller });\\n\\n        // @dev Governed contract SHOULD validate the msg.value if it's used\\n        (bool success, bytes memory returnData) = message.governedContract.call{ value: msg.value }(message.callData);\\n        if (!success) {\\n            if (returnData.length == 0) revert GovernanceCallFailed();\\n            assembly (\\\"memory-safe\\\") {\\n                revert(add(32, returnData), mload(returnData))\\n            }\\n        }\\n\\n        // @dev set back to zero\\n        messageOrigin = GovernanceOrigin({ eid: 0, caller: bytes32(0) });\\n    }\\n}\",\"keccak256\":\"0xd589552bc4be614c8dd785166278638d168626906c8976629b6e64ce63bce616\",\"license\":\"Apache-2.0\"},\"contracts/GovernanceMessageEVMCodec.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport { GovernanceAction } from \\\"./IGovernanceController.sol\\\";\\n\\nlibrary GovernanceMessageEVMCodec {\\n    uint8 private constant ACTION_OFFSET = 0;\\n    uint8 private constant ORIGIN_CALLER_OFFSET = ACTION_OFFSET + 1;\\n    uint8 private constant GOVERNED_CONTRACT_OFFSET = ORIGIN_CALLER_OFFSET + 32;\\n    uint8 private constant CALLDATA_OFFSET = GOVERNED_CONTRACT_OFFSET + 20;\\n\\n    /*\\n     * @dev General purpose governance message to call arbitrary methods on a governed EVM smart contract.\\n     *      The wire format for this message is:\\n     *      - action - 1 byte\\n     *      - originCaller - 32 bytes\\n     *      - governedContract - 20 bytes\\n     *      - callData - remaining bytes\\n     */\\n    struct GovernanceMessage {\\n        uint8 action;\\n        bytes32 originCaller;\\n        address governedContract;\\n        bytes callData;\\n    }\\n\\n    error InvalidAction(uint8 action);\\n    error InvalidMessageLength();\\n\\n    function encode(GovernanceMessage memory _message) internal pure returns (bytes memory encoded) {\\n        if (_message.action != uint8(GovernanceAction.EVM_CALL)) {\\n            revert InvalidAction(_message.action);\\n        }\\n\\n        return abi.encodePacked(\\n            _message.action,\\n            _message.originCaller,\\n            _message.governedContract,\\n            _message.callData\\n        );\\n    }\\n\\n    function decode(bytes calldata _msg) internal pure returns (GovernanceMessage memory message) {\\n        if (_msg.length < CALLDATA_OFFSET) revert InvalidMessageLength();\\n        if (uint8(_msg[ACTION_OFFSET]) != uint8(GovernanceAction.EVM_CALL)) {\\n            revert InvalidAction(uint8(_msg[ACTION_OFFSET]));\\n        }\\n        \\n        message.action = uint8(_msg[ACTION_OFFSET]);\\n        message.originCaller = bytes32(_msg[ORIGIN_CALLER_OFFSET:GOVERNED_CONTRACT_OFFSET]);\\n        message.governedContract = address(uint160(bytes20(_msg[GOVERNED_CONTRACT_OFFSET:CALLDATA_OFFSET])));\\n        \\n        message.callData = _msg[CALLDATA_OFFSET:];\\n    }\\n}\",\"keccak256\":\"0x5328ef3498ac74ba1bf10c40f586be916836dd6d6f70b27ea59b5f6ca4abdbf6\",\"license\":\"Apache-2.0\"},\"contracts/GovernanceMessageGenericCodec.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nlibrary GovernanceMessageGenericCodec {\\n    uint8 private constant ACTION_OFFSET = 0;\\n    uint8 private constant ORIGIN_CALLER_OFFSET = ACTION_OFFSET + 1;\\n\\n    error InvalidGenericMessageLength();\\n\\n    function assertValidMessageLength(bytes calldata _msg) internal pure {\\n        if (_msg.length < ORIGIN_CALLER_OFFSET + 32) {\\n            revert InvalidGenericMessageLength();\\n        }\\n    }\\n\\n    function action(bytes calldata _msg) internal pure returns (uint8) {\\n        return uint8(_msg[ACTION_OFFSET]);\\n    }\\n\\n    function originCaller(bytes calldata _msg) internal pure returns (bytes32) {\\n        return bytes32(_msg[ORIGIN_CALLER_OFFSET:ORIGIN_CALLER_OFFSET+32]);\\n    }\\n}\",\"keccak256\":\"0xd8c8fc1bc3add7fc106edacd16dcd4fe89b13b0e26cc84da0156bce38abc2a0a\",\"license\":\"Apache-2.0\"},\"contracts/IGovernanceController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nstruct GovernanceOrigin {\\n    uint32 eid; // LayerZero Endpoint ID\\n    bytes32 caller; // Caller on the source chain\\n}\\n\\n/// @notice The known set of governance actions.\\nenum GovernanceAction {\\n    UNDEFINED,\\n    EVM_CALL,\\n    SOLANA_CALL\\n}\\n\\ninterface IGovernanceController {\\n    function messageOrigin() external view returns (uint32 eid, bytes32 caller);\\n}\\n\",\"keccak256\":\"0x3d24b8cf862132a1c10b210d603fdb97b3962c1ace75de9e59659368fcc89cde\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002b2b38038062002b2b8339810160408190526200003491620001f7565b85858181806001600160a01b0381166200006857604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000073816200018a565b506001600160a01b038083166080528116620000a257604051632d618d8160e21b815260040160405180910390fd5b60805160405163ca5eb5e160e01b81526001600160a01b0383811660048301529091169063ca5eb5e190602401600060405180830381600087803b158015620000ea57600080fd5b505af1158015620000ff573d6000803e3d6000fd5b505060016003555050871593506200017e925050505763ffffffff8316600081815260076020908152604080832086845282528083206001600160a01b0386168085529252808320805460ff19166001179055519092859290917fba1ebdae704ff482216c4243867e09d7affdfcb27144d4041f8e8d17784c17d89190a45b50505050505062000281565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001f257600080fd5b919050565b60008060008060008060c087890312156200021157600080fd5b6200021c87620001da565b95506200022c60208801620001da565b9450604087015180151581146200024257600080fd5b606088015190945063ffffffff811681146200025d57600080fd5b608088015190935091506200027560a08801620001da565b90509295509295509295565b608051612856620002d5600039600081816102e10152818161063601528181610af501528181610d7a01528181610dfe0152818161116d0152818161166a01528181611850015261190701526128566000f3fe60806040526004361061019c5760003560e01c80638cf3239c116100ec578063ca5eb5e11161008a578063f2264f0e11610064578063f2264f0e14610542578063f24be0c814610562578063f2fde38b14610582578063ff7bd03d146105a257600080fd5b8063ca5eb5e1146104c1578063db428235146104e1578063e9598b701461052257600080fd5b8063b98bd070116100c6578063b98bd07014610433578063bb0b6a5314610453578063bc70b3541461048e578063bf97fe81146104ae57600080fd5b80638cf3239c146103c85780638d43f142146103e85780638da5cb5b1461041557600080fd5b80633b1623fe11610159578063715018a611610133578063715018a61461031b5780637d25a05e1461033057806382413eac1461036857806388ff14e81461039857600080fd5b80633b1623fe146102655780635535d461146102a25780635e280f11146102cf57600080fd5b806310de4b45146101a157806313137d65146101c357806317442b70146101d65780631d3419ad146101fd5780631f5e13341461021d5780633400288b14610245575b600080fd5b3480156101ad57600080fd5b506101c16101bc366004611a6a565b6105c2565b005b6101c16101d1366004611b0a565b610634565b3480156101e257600080fd5b50604080516001815260026020820152015b60405180910390f35b34801561020957600080fd5b506101c1610218366004611ba9565b6106f4565b34801561022957600080fd5b50610232600181565b60405161ffff90911681526020016101f4565b34801561025157600080fd5b506101c1610260366004611bc6565b610748565b34801561027157600080fd5b506004546005546102869163ffffffff169082565b6040805163ffffffff90931683526020830191909152016101f4565b3480156102ae57600080fd5b506102c26102bd366004611c02565b61075e565b6040516101f49190611c85565b3480156102db57600080fd5b506103037f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101f4565b34801561032757600080fd5b506101c1610803565b34801561033c57600080fd5b5061035061034b366004611bc6565b610817565b6040516001600160401b0390911681526020016101f4565b34801561037457600080fd5b50610388610383366004611c98565b610820565b60405190151581526020016101f4565b3480156103a457600080fd5b506103886103b3366004611ba9565b60066020526000908152604090205460ff1681565b6103db6103d6366004611d22565b610835565b6040516101f49190611dc1565b3480156103f457600080fd5b50610408610403366004611e13565b610886565b6040516101f49190611e9e565b34801561042157600080fd5b506000546001600160a01b0316610303565b34801561043f57600080fd5b506101c161044e366004611eb5565b6108c5565b34801561045f57600080fd5b5061048061046e366004611f29565b60016020526000908152604090205481565b6040519081526020016101f4565b34801561049a57600080fd5b506102c26104a9366004611f44565b6108df565b6103db6104bc366004611fa4565b610a87565b3480156104cd57600080fd5b506101c16104dc366004611ba9565b610ace565b3480156104ed57600080fd5b506103886104fc366004611a6a565b600760209081526000938452604080852082529284528284209052825290205460ff1681565b34801561052e57600080fd5b506101c161053d366004611ba9565b610b54565b34801561054e57600080fd5b5061040861055d36600461204d565b610ba5565b34801561056e57600080fd5b506101c161057d366004611a6a565b610c0e565b34801561058e57600080fd5b506101c161059d366004611ba9565b610c83565b3480156105ae57600080fd5b506103886105bd3660046120df565b610cc1565b6105ca610cf7565b63ffffffff8316600081815260076020908152604080832086845282528083206001600160a01b0386168085529252808320805460ff19169055519092859290917fe5b0ec7dcaf7d03e77d301248ef2fcd1289fc6db5cf46f55556cc9afefc2cb9c9190a4505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610684576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b6020870180359061069e90610699908a611f29565b610d24565b146106dc576106b06020880188611f29565b60405163309afaf360e21b815263ffffffff90911660048201526020880135602482015260440161067b565b6106eb87878787878787610d60565b50505050505050565b6106fc610cf7565b6001600160a01b038116600081815260066020526040808220805460ff19166001179055517f2db1268ac8751ea8f209ac22d0a6d1d47fe6e34603bafe4b499a781ce6e484e39190a250565b610750610cf7565b61075a828261101d565b5050565b600260209081526000928352604080842090915290825290208054610782906120fb565b80601f01602080910402602001604051908101604052809291908181526020018280546107ae906120fb565b80156107fb5780601f106107d0576101008083540402835291602001916107fb565b820191906000526020600020905b8154815290600101906020018083116107de57829003601f168201915b505050505081565b61080b610cf7565b6108156000611072565b565b60005b92915050565b6001600160a01b03811630145b949350505050565b61083d6119f5565b3360009081526006602052604090205460ff1661086d576040516348f5c3ed60e01b815260040160405180910390fd5b61087b8787878787876110c2565b979650505050505050565b60408051808201909152600080825260208201526000806108a988888888611129565b915091506108b987838387611157565b98975050505050505050565b6108cd610cf7565b61075a6108da828461222e565b611238565b63ffffffff8416600090815260026020908152604080832061ffff87168452909152812080546060929190610913906120fb565b80601f016020809104026020016040519081016040528092919081815260200182805461093f906120fb565b801561098c5780601f106109615761010080835404028352916020019161098c565b820191906000526020600020905b81548152906001019060200180831161096f57829003601f168201915b5050505050905080516000036109dc5783838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092945061082d9350505050565b60008390036109ec57905061082d565b60028310610a6a57610a3384848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061134a92505050565b80610a418460028188612303565b604051602001610a539392919061232d565b60405160208183030381529060405291505061082d565b8383604051639a6d49cd60e01b815260040161067b929190612355565b610a8f6119f5565b3360009081526006602052604090205460ff16610abf576040516348f5c3ed60e01b815260040160405180910390fd5b6108b988888888888888611376565b610ad6610cf7565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b158015610b3957600080fd5b505af1158015610b4d573d6000803e3d6000fd5b5050505050565b610b5c610cf7565b6001600160a01b038116600081815260066020526040808220805460ff19169055517fd3dd4da22729423d3243f25c6646981e69acb10645ca3dc8ab95a443133304b79190a250565b60408051808201909152600080825260208201526000610bc886600187876108df565b90506108b98689898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508692508891506111579050565b610c16610cf7565b63ffffffff8316600081815260076020908152604080832086845282528083206001600160a01b0386168085529252808320805460ff19166001179055519092859290917fba1ebdae704ff482216c4243867e09d7affdfcb27144d4041f8e8d17784c17d89190a4505050565b610c8b610cf7565b6001600160a01b038116610cb557604051631e4fbdf760e01b81526000600482015260240161067b565b610cbe81611072565b50565b6000602082018035906001908390610cd99086611f29565b63ffffffff1681526020810191909152604001600020541492915050565b6000546001600160a01b031633146108155760405163118cdaa760e01b815233600482015260240161067b565b63ffffffff81166000908152600160205260408120548061081a5760405163f6ff4fb760e01b815263ffffffff8416600482015260240161067b565b610d68611413565b6000610d74868661143d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfa9190612384565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031682604001516001600160a01b03161480610e6857506001600160a01b03811615801590610e685750806001600160a01b031682604001516001600160a01b0316145b15610e9757604080830151905163d0c5e62f60e01b81526001600160a01b03909116600482015260240161067b565b60076000610ea860208c018c611f29565b63ffffffff168152602080820192909252604090810160009081208584015182528352818120858301516001600160a01b0316825290925290205460ff16610f035760405163416aebb560e11b815260040160405180910390fd5b6040805180820190915280610f1b60208c018c611f29565b63ffffffff90811682526020858101519281019290925282516004805463ffffffff19169190921617905501516005556040808301516060840151915160009283926001600160a01b0316913491610f72916123a1565b60006040518083038185875af1925050503d8060008114610faf576040519150601f19603f3d011682016040523d82523d6000602084013e610fb4565b606091505b509150915081610fe8578051600003610fe057604051637138c4e760e11b815260040160405180910390fd5b805181602001fd5b505060408051808201909152600080825260209091018190526004805463ffffffff19169055600555505060016003556106eb565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6110ca6119f5565b338760200135146110ed5760405162961f7560e51b815260040160405180910390fd5b6000806110fc89898989611129565b909250905061111c888383611116368a90038a018a6123bd565b88611637565b9998505050505050505050565b60608061113d611138876123ef565b611737565b915061114c85600186866108df565b905094509492505050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff1681526020016111ba89610d24565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b81526004016111ef92919061248b565b6040805180830381865afa15801561120b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122f9190612534565b95945050505050565b60005b815181101561130f5761126a82828151811061125957611259612550565b60200260200101516040015161134a565b81818151811061127c5761127c612550565b6020026020010151604001516002600084848151811061129e5761129e612550565b60200260200101516000015163ffffffff1663ffffffff16815260200190815260200160002060008484815181106112d8576112d8612550565b60200260200101516020015161ffff1661ffff168152602001908152602001600020908161130691906125b7565b5060010161123b565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b6748160405161133f9190612676565b60405180910390a150565b600281015161ffff811660031461075a5781604051639a6d49cd60e01b815260040161067b9190611c85565b61137e6119f5565b61138888886117a0565b3361139389896117da565b146113b05760405162961f7560e51b815260040160405180910390fd5b60006113bf87600188886108df565b905061111c878a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525086925061140d915050368990038901896123bd565b87611637565b60026003540361143657604051633ee5aeb560e01b815260040160405180910390fd5b6002600355565b604080516080810182526000808252602082018190529181019190915260608082015261146c60006001612701565b611477906020612701565b611482906014612701565b60ff168210156114a557604051638d0242c960e01b815260040160405180910390fd5b600183836000816114b8576114b8612550565b9050013560f81c60f81b60f81c60ff16146114ff5782826000816114de576114de612550565b6040516317949c6760e11b815292013560f81c60048301525060240161067b565b828260008161151057611510612550565b919091013560f81c825250828261152960006001612701565b60ff169061153960006001612701565b611544906020612701565b60ff169261155493929190612303565b61155d91612728565b6020820152828261157060006001612701565b61157b906020612701565b60ff169061158b60006001612701565b611596906020612701565b6115a1906014612701565b60ff16926115b193929190612303565b6115ba91612746565b60601c604082015282826115d060006001612701565b6115db906020612701565b6115e6906014612701565b60ff169080926115f893929190612303565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505050606082015292915050565b61163f6119f5565b600061164e8460000151611824565b60208501519091501561166857611668846020015161184c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff1681526020016116b88c610d24565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b81526004016116f492919061248b565b60806040518083038185885af1158015611712573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061087b919061277b565b805160609060ff166001146117675781516040516317949c6760e11b815260ff909116600482015260240161067b565b81516020808401516040808601516060870151915161178a9594919291016127d1565b6040516020818303038152906040529050919050565b6117ac60006001612701565b6117b7906020612701565b60ff1681101561075a57604051637f0569db60e11b815260040160405180910390fd5b600082826117e9836001612701565b60ff16906117f960006001612701565b611804906020612701565b60ff169261181493929190612303565b61181d91612728565b9392505050565b6000813414611848576040516304fb820960e51b815234600482015260240161067b565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d09190612384565b90506001600160a01b0381166118f9576040516329b99a9560e11b815260040160405180910390fd5b6040805133602482018190527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03818116604485015260648085018890528551808603909101815260849094019094526020830180516001600160e01b03166323b872dd60e01b17905261075a93851692869061197e908590611984565b50505050565b600080602060008451602086016000885af1806119a7576040513d6000823e3d81fd5b50506000513d915081156119bf5780600114156119cc565b6001600160a01b0384163b155b1561197e57604051635274afe760e01b81526001600160a01b038516600482015260240161067b565b60405180606001604052806000801916815260200160006001600160401b03168152602001611a37604051806040016040528060008152602001600081525090565b905290565b803563ffffffff81168114611a5057600080fd5b919050565b6001600160a01b0381168114610cbe57600080fd5b600080600060608486031215611a7f57600080fd5b611a8884611a3c565b9250602084013591506040840135611a9f81611a55565b809150509250925092565b600060608284031215611abc57600080fd5b50919050565b60008083601f840112611ad457600080fd5b5081356001600160401b03811115611aeb57600080fd5b602083019150836020828501011115611b0357600080fd5b9250929050565b600080600080600080600060e0888a031215611b2557600080fd5b611b2f8989611aaa565b96506060880135955060808801356001600160401b0380821115611b5257600080fd5b611b5e8b838c01611ac2565b909750955060a08a01359150611b7382611a55565b90935060c08901359080821115611b8957600080fd5b50611b968a828b01611ac2565b989b979a50959850939692959293505050565b600060208284031215611bbb57600080fd5b813561181d81611a55565b60008060408385031215611bd957600080fd5b611be283611a3c565b946020939093013593505050565b803561ffff81168114611a5057600080fd5b60008060408385031215611c1557600080fd5b611c1e83611a3c565b9150611c2c60208401611bf0565b90509250929050565b60005b83811015611c50578181015183820152602001611c38565b50506000910152565b60008151808452611c71816020860160208601611c35565b601f01601f19169290920160200192915050565b60208152600061181d6020830184611c59565b60008060008060a08587031215611cae57600080fd5b611cb88686611aaa565b935060608501356001600160401b03811115611cd357600080fd5b611cdf87828801611ac2565b9094509250506080850135611cf381611a55565b939692955090935050565b600060808284031215611abc57600080fd5b600060408284031215611abc57600080fd5b60008060008060008060c08789031215611d3b57600080fd5b86356001600160401b0380821115611d5257600080fd5b611d5e8a838b01611cfe565b9750611d6c60208a01611a3c565b96506040890135915080821115611d8257600080fd5b50611d8f89828a01611ac2565b9095509350611da390508860608901611d10565b915060a0870135611db381611a55565b809150509295509295509295565b6000608082019050825182526001600160401b0360208401511660208301526040830151611dfc604084018280518252602090810151910152565b5092915050565b80358015158114611a5057600080fd5b600080600080600060808688031215611e2b57600080fd5b85356001600160401b0380821115611e4257600080fd5b611e4e89838a01611cfe565b9650611e5c60208901611a3c565b95506040880135915080821115611e7257600080fd5b50611e7f88828901611ac2565b9094509250611e92905060608701611e03565b90509295509295909350565b81518152602080830151908201526040810161081a565b60008060208385031215611ec857600080fd5b82356001600160401b0380821115611edf57600080fd5b818501915085601f830112611ef357600080fd5b813581811115611f0257600080fd5b8660208260051b8501011115611f1757600080fd5b60209290920196919550909350505050565b600060208284031215611f3b57600080fd5b61181d82611a3c565b60008060008060608587031215611f5a57600080fd5b611f6385611a3c565b9350611f7160208601611bf0565b925060408501356001600160401b03811115611f8c57600080fd5b611f9887828801611ac2565b95989497509550505050565b600080600080600080600060c0888a031215611fbf57600080fd5b87356001600160401b0380821115611fd657600080fd5b611fe28b838c01611ac2565b9099509750879150611ff660208b01611a3c565b965060408a013591508082111561200c57600080fd5b506120198a828b01611ac2565b909550935061202d90508960608a01611d10565b915060a088013561203d81611a55565b8091505092959891949750929550565b6000806000806000806080878903121561206657600080fd5b86356001600160401b038082111561207d57600080fd5b6120898a838b01611ac2565b909850965086915061209d60208a01611a3c565b955060408901359150808211156120b357600080fd5b506120c089828a01611ac2565b90945092506120d3905060608801611e03565b90509295509295509295565b6000606082840312156120f157600080fd5b61181d8383611aaa565b600181811c9082168061210f57607f821691505b602082108103611abc57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156121675761216761212f565b60405290565b604080519081016001600160401b03811182821017156121675761216761212f565b604051601f8201601f191681016001600160401b03811182821017156121b7576121b761212f565b604052919050565b600082601f8301126121d057600080fd5b81356001600160401b038111156121e9576121e961212f565b6121fc601f8201601f191660200161218f565b81815284602083860101111561221157600080fd5b816020850160208301376000918101602001919091529392505050565b60006001600160401b03808411156122485761224861212f565b8360051b602061225981830161218f565b86815291850191818101903684111561227157600080fd5b865b848110156122f75780358681111561228b5760008081fd5b8801606036829003121561229f5760008081fd5b6122a7612145565b6122b082611a3c565b81526122bd868301611bf0565b86820152604080830135898111156122d55760008081fd5b6122e1368286016121bf565b9183019190915250845250918301918301612273565b50979650505050505050565b6000808585111561231357600080fd5b8386111561232057600080fd5b5050820193919092039150565b6000845161233f818460208901611c35565b8201838582376000930192835250909392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60006020828403121561239657600080fd5b815161181d81611a55565b600082516123b3818460208701611c35565b9190910192915050565b6000604082840312156123cf57600080fd5b6123d761216d565b82358152602083013560208201528091505092915050565b60006080823603121561240157600080fd5b604051608081016001600160401b0382821081831117156124245761242461212f565b816040528435915060ff8216821461243b57600080fd5b818352602085013560208401526040850135915061245882611a55565b816040840152606085013591508082111561247257600080fd5b5061247f368286016121bf565b60608301525092915050565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a060808401526124c160e0840182611c59565b90506060850151603f198483030160a08501526124de8282611c59565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b60006040828403121561251657600080fd5b61251e61216d565b9050815181526020820151602082015292915050565b60006040828403121561254657600080fd5b61181d8383612504565b634e487b7160e01b600052603260045260246000fd5b601f8211156125b2576000816000526020600020601f850160051c8101602086101561258f5750805b601f850160051c820191505b818110156125ae5782815560010161259b565b5050505b505050565b81516001600160401b038111156125d0576125d061212f565b6125e4816125de84546120fb565b84612566565b602080601f83116001811461261957600084156126015750858301515b600019600386901b1c1916600185901b1785556125ae565b600085815260208120601f198616915b8281101561264857888601518255948401946001909101908401612629565b50858210156126665787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b838110156126f357888303603f190185528151805163ffffffff1684528781015161ffff168885015286015160608785018190526126df81860183611c59565b96890196945050509086019060010161269f565b509098975050505050505050565b60ff818116838216019081111561081a57634e487b7160e01b600052601160045260246000fd5b8035602083101561081a57600019602084900360031b1b1692915050565b6bffffffffffffffffffffffff1981358181169160148510156127735780818660140360031b1b83161692505b505092915050565b60006080828403121561278d57600080fd5b612795612145565b8251815260208301516001600160401b03811681146127b357600080fd5b60208201526127c58460408501612504565b60408201529392505050565b60ff60f81b8560f81b1681528360018201526bffffffffffffffffffffffff198360601b16602182015260008251612810816035850160208701611c35565b919091016035019594505050505056fea26469706673582212205ee3ad31d8292b66c3cb4774204fb05a05b406d18adcedc7fcc443a5c967a40d64736f6c63430008160033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c80638cf3239c116100ec578063ca5eb5e11161008a578063f2264f0e11610064578063f2264f0e14610542578063f24be0c814610562578063f2fde38b14610582578063ff7bd03d146105a257600080fd5b8063ca5eb5e1146104c1578063db428235146104e1578063e9598b701461052257600080fd5b8063b98bd070116100c6578063b98bd07014610433578063bb0b6a5314610453578063bc70b3541461048e578063bf97fe81146104ae57600080fd5b80638cf3239c146103c85780638d43f142146103e85780638da5cb5b1461041557600080fd5b80633b1623fe11610159578063715018a611610133578063715018a61461031b5780637d25a05e1461033057806382413eac1461036857806388ff14e81461039857600080fd5b80633b1623fe146102655780635535d461146102a25780635e280f11146102cf57600080fd5b806310de4b45146101a157806313137d65146101c357806317442b70146101d65780631d3419ad146101fd5780631f5e13341461021d5780633400288b14610245575b600080fd5b3480156101ad57600080fd5b506101c16101bc366004611a6a565b6105c2565b005b6101c16101d1366004611b0a565b610634565b3480156101e257600080fd5b50604080516001815260026020820152015b60405180910390f35b34801561020957600080fd5b506101c1610218366004611ba9565b6106f4565b34801561022957600080fd5b50610232600181565b60405161ffff90911681526020016101f4565b34801561025157600080fd5b506101c1610260366004611bc6565b610748565b34801561027157600080fd5b506004546005546102869163ffffffff169082565b6040805163ffffffff90931683526020830191909152016101f4565b3480156102ae57600080fd5b506102c26102bd366004611c02565b61075e565b6040516101f49190611c85565b3480156102db57600080fd5b506103037f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101f4565b34801561032757600080fd5b506101c1610803565b34801561033c57600080fd5b5061035061034b366004611bc6565b610817565b6040516001600160401b0390911681526020016101f4565b34801561037457600080fd5b50610388610383366004611c98565b610820565b60405190151581526020016101f4565b3480156103a457600080fd5b506103886103b3366004611ba9565b60066020526000908152604090205460ff1681565b6103db6103d6366004611d22565b610835565b6040516101f49190611dc1565b3480156103f457600080fd5b50610408610403366004611e13565b610886565b6040516101f49190611e9e565b34801561042157600080fd5b506000546001600160a01b0316610303565b34801561043f57600080fd5b506101c161044e366004611eb5565b6108c5565b34801561045f57600080fd5b5061048061046e366004611f29565b60016020526000908152604090205481565b6040519081526020016101f4565b34801561049a57600080fd5b506102c26104a9366004611f44565b6108df565b6103db6104bc366004611fa4565b610a87565b3480156104cd57600080fd5b506101c16104dc366004611ba9565b610ace565b3480156104ed57600080fd5b506103886104fc366004611a6a565b600760209081526000938452604080852082529284528284209052825290205460ff1681565b34801561052e57600080fd5b506101c161053d366004611ba9565b610b54565b34801561054e57600080fd5b5061040861055d36600461204d565b610ba5565b34801561056e57600080fd5b506101c161057d366004611a6a565b610c0e565b34801561058e57600080fd5b506101c161059d366004611ba9565b610c83565b3480156105ae57600080fd5b506103886105bd3660046120df565b610cc1565b6105ca610cf7565b63ffffffff8316600081815260076020908152604080832086845282528083206001600160a01b0386168085529252808320805460ff19169055519092859290917fe5b0ec7dcaf7d03e77d301248ef2fcd1289fc6db5cf46f55556cc9afefc2cb9c9190a4505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610684576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b6020870180359061069e90610699908a611f29565b610d24565b146106dc576106b06020880188611f29565b60405163309afaf360e21b815263ffffffff90911660048201526020880135602482015260440161067b565b6106eb87878787878787610d60565b50505050505050565b6106fc610cf7565b6001600160a01b038116600081815260066020526040808220805460ff19166001179055517f2db1268ac8751ea8f209ac22d0a6d1d47fe6e34603bafe4b499a781ce6e484e39190a250565b610750610cf7565b61075a828261101d565b5050565b600260209081526000928352604080842090915290825290208054610782906120fb565b80601f01602080910402602001604051908101604052809291908181526020018280546107ae906120fb565b80156107fb5780601f106107d0576101008083540402835291602001916107fb565b820191906000526020600020905b8154815290600101906020018083116107de57829003601f168201915b505050505081565b61080b610cf7565b6108156000611072565b565b60005b92915050565b6001600160a01b03811630145b949350505050565b61083d6119f5565b3360009081526006602052604090205460ff1661086d576040516348f5c3ed60e01b815260040160405180910390fd5b61087b8787878787876110c2565b979650505050505050565b60408051808201909152600080825260208201526000806108a988888888611129565b915091506108b987838387611157565b98975050505050505050565b6108cd610cf7565b61075a6108da828461222e565b611238565b63ffffffff8416600090815260026020908152604080832061ffff87168452909152812080546060929190610913906120fb565b80601f016020809104026020016040519081016040528092919081815260200182805461093f906120fb565b801561098c5780601f106109615761010080835404028352916020019161098c565b820191906000526020600020905b81548152906001019060200180831161096f57829003601f168201915b5050505050905080516000036109dc5783838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092945061082d9350505050565b60008390036109ec57905061082d565b60028310610a6a57610a3384848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061134a92505050565b80610a418460028188612303565b604051602001610a539392919061232d565b60405160208183030381529060405291505061082d565b8383604051639a6d49cd60e01b815260040161067b929190612355565b610a8f6119f5565b3360009081526006602052604090205460ff16610abf576040516348f5c3ed60e01b815260040160405180910390fd5b6108b988888888888888611376565b610ad6610cf7565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b158015610b3957600080fd5b505af1158015610b4d573d6000803e3d6000fd5b5050505050565b610b5c610cf7565b6001600160a01b038116600081815260066020526040808220805460ff19169055517fd3dd4da22729423d3243f25c6646981e69acb10645ca3dc8ab95a443133304b79190a250565b60408051808201909152600080825260208201526000610bc886600187876108df565b90506108b98689898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508692508891506111579050565b610c16610cf7565b63ffffffff8316600081815260076020908152604080832086845282528083206001600160a01b0386168085529252808320805460ff19166001179055519092859290917fba1ebdae704ff482216c4243867e09d7affdfcb27144d4041f8e8d17784c17d89190a4505050565b610c8b610cf7565b6001600160a01b038116610cb557604051631e4fbdf760e01b81526000600482015260240161067b565b610cbe81611072565b50565b6000602082018035906001908390610cd99086611f29565b63ffffffff1681526020810191909152604001600020541492915050565b6000546001600160a01b031633146108155760405163118cdaa760e01b815233600482015260240161067b565b63ffffffff81166000908152600160205260408120548061081a5760405163f6ff4fb760e01b815263ffffffff8416600482015260240161067b565b610d68611413565b6000610d74868661143d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfa9190612384565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031682604001516001600160a01b03161480610e6857506001600160a01b03811615801590610e685750806001600160a01b031682604001516001600160a01b0316145b15610e9757604080830151905163d0c5e62f60e01b81526001600160a01b03909116600482015260240161067b565b60076000610ea860208c018c611f29565b63ffffffff168152602080820192909252604090810160009081208584015182528352818120858301516001600160a01b0316825290925290205460ff16610f035760405163416aebb560e11b815260040160405180910390fd5b6040805180820190915280610f1b60208c018c611f29565b63ffffffff90811682526020858101519281019290925282516004805463ffffffff19169190921617905501516005556040808301516060840151915160009283926001600160a01b0316913491610f72916123a1565b60006040518083038185875af1925050503d8060008114610faf576040519150601f19603f3d011682016040523d82523d6000602084013e610fb4565b606091505b509150915081610fe8578051600003610fe057604051637138c4e760e11b815260040160405180910390fd5b805181602001fd5b505060408051808201909152600080825260209091018190526004805463ffffffff19169055600555505060016003556106eb565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6110ca6119f5565b338760200135146110ed5760405162961f7560e51b815260040160405180910390fd5b6000806110fc89898989611129565b909250905061111c888383611116368a90038a018a6123bd565b88611637565b9998505050505050505050565b60608061113d611138876123ef565b611737565b915061114c85600186866108df565b905094509492505050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff1681526020016111ba89610d24565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b81526004016111ef92919061248b565b6040805180830381865afa15801561120b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122f9190612534565b95945050505050565b60005b815181101561130f5761126a82828151811061125957611259612550565b60200260200101516040015161134a565b81818151811061127c5761127c612550565b6020026020010151604001516002600084848151811061129e5761129e612550565b60200260200101516000015163ffffffff1663ffffffff16815260200190815260200160002060008484815181106112d8576112d8612550565b60200260200101516020015161ffff1661ffff168152602001908152602001600020908161130691906125b7565b5060010161123b565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b6748160405161133f9190612676565b60405180910390a150565b600281015161ffff811660031461075a5781604051639a6d49cd60e01b815260040161067b9190611c85565b61137e6119f5565b61138888886117a0565b3361139389896117da565b146113b05760405162961f7560e51b815260040160405180910390fd5b60006113bf87600188886108df565b905061111c878a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525086925061140d915050368990038901896123bd565b87611637565b60026003540361143657604051633ee5aeb560e01b815260040160405180910390fd5b6002600355565b604080516080810182526000808252602082018190529181019190915260608082015261146c60006001612701565b611477906020612701565b611482906014612701565b60ff168210156114a557604051638d0242c960e01b815260040160405180910390fd5b600183836000816114b8576114b8612550565b9050013560f81c60f81b60f81c60ff16146114ff5782826000816114de576114de612550565b6040516317949c6760e11b815292013560f81c60048301525060240161067b565b828260008161151057611510612550565b919091013560f81c825250828261152960006001612701565b60ff169061153960006001612701565b611544906020612701565b60ff169261155493929190612303565b61155d91612728565b6020820152828261157060006001612701565b61157b906020612701565b60ff169061158b60006001612701565b611596906020612701565b6115a1906014612701565b60ff16926115b193929190612303565b6115ba91612746565b60601c604082015282826115d060006001612701565b6115db906020612701565b6115e6906014612701565b60ff169080926115f893929190612303565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505050606082015292915050565b61163f6119f5565b600061164e8460000151611824565b60208501519091501561166857611668846020015161184c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff1681526020016116b88c610d24565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b81526004016116f492919061248b565b60806040518083038185885af1158015611712573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061087b919061277b565b805160609060ff166001146117675781516040516317949c6760e11b815260ff909116600482015260240161067b565b81516020808401516040808601516060870151915161178a9594919291016127d1565b6040516020818303038152906040529050919050565b6117ac60006001612701565b6117b7906020612701565b60ff1681101561075a57604051637f0569db60e11b815260040160405180910390fd5b600082826117e9836001612701565b60ff16906117f960006001612701565b611804906020612701565b60ff169261181493929190612303565b61181d91612728565b9392505050565b6000813414611848576040516304fb820960e51b815234600482015260240161067b565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d09190612384565b90506001600160a01b0381166118f9576040516329b99a9560e11b815260040160405180910390fd5b6040805133602482018190527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03818116604485015260648085018890528551808603909101815260849094019094526020830180516001600160e01b03166323b872dd60e01b17905261075a93851692869061197e908590611984565b50505050565b600080602060008451602086016000885af1806119a7576040513d6000823e3d81fd5b50506000513d915081156119bf5780600114156119cc565b6001600160a01b0384163b155b1561197e57604051635274afe760e01b81526001600160a01b038516600482015260240161067b565b60405180606001604052806000801916815260200160006001600160401b03168152602001611a37604051806040016040528060008152602001600081525090565b905290565b803563ffffffff81168114611a5057600080fd5b919050565b6001600160a01b0381168114610cbe57600080fd5b600080600060608486031215611a7f57600080fd5b611a8884611a3c565b9250602084013591506040840135611a9f81611a55565b809150509250925092565b600060608284031215611abc57600080fd5b50919050565b60008083601f840112611ad457600080fd5b5081356001600160401b03811115611aeb57600080fd5b602083019150836020828501011115611b0357600080fd5b9250929050565b600080600080600080600060e0888a031215611b2557600080fd5b611b2f8989611aaa565b96506060880135955060808801356001600160401b0380821115611b5257600080fd5b611b5e8b838c01611ac2565b909750955060a08a01359150611b7382611a55565b90935060c08901359080821115611b8957600080fd5b50611b968a828b01611ac2565b989b979a50959850939692959293505050565b600060208284031215611bbb57600080fd5b813561181d81611a55565b60008060408385031215611bd957600080fd5b611be283611a3c565b946020939093013593505050565b803561ffff81168114611a5057600080fd5b60008060408385031215611c1557600080fd5b611c1e83611a3c565b9150611c2c60208401611bf0565b90509250929050565b60005b83811015611c50578181015183820152602001611c38565b50506000910152565b60008151808452611c71816020860160208601611c35565b601f01601f19169290920160200192915050565b60208152600061181d6020830184611c59565b60008060008060a08587031215611cae57600080fd5b611cb88686611aaa565b935060608501356001600160401b03811115611cd357600080fd5b611cdf87828801611ac2565b9094509250506080850135611cf381611a55565b939692955090935050565b600060808284031215611abc57600080fd5b600060408284031215611abc57600080fd5b60008060008060008060c08789031215611d3b57600080fd5b86356001600160401b0380821115611d5257600080fd5b611d5e8a838b01611cfe565b9750611d6c60208a01611a3c565b96506040890135915080821115611d8257600080fd5b50611d8f89828a01611ac2565b9095509350611da390508860608901611d10565b915060a0870135611db381611a55565b809150509295509295509295565b6000608082019050825182526001600160401b0360208401511660208301526040830151611dfc604084018280518252602090810151910152565b5092915050565b80358015158114611a5057600080fd5b600080600080600060808688031215611e2b57600080fd5b85356001600160401b0380821115611e4257600080fd5b611e4e89838a01611cfe565b9650611e5c60208901611a3c565b95506040880135915080821115611e7257600080fd5b50611e7f88828901611ac2565b9094509250611e92905060608701611e03565b90509295509295909350565b81518152602080830151908201526040810161081a565b60008060208385031215611ec857600080fd5b82356001600160401b0380821115611edf57600080fd5b818501915085601f830112611ef357600080fd5b813581811115611f0257600080fd5b8660208260051b8501011115611f1757600080fd5b60209290920196919550909350505050565b600060208284031215611f3b57600080fd5b61181d82611a3c565b60008060008060608587031215611f5a57600080fd5b611f6385611a3c565b9350611f7160208601611bf0565b925060408501356001600160401b03811115611f8c57600080fd5b611f9887828801611ac2565b95989497509550505050565b600080600080600080600060c0888a031215611fbf57600080fd5b87356001600160401b0380821115611fd657600080fd5b611fe28b838c01611ac2565b9099509750879150611ff660208b01611a3c565b965060408a013591508082111561200c57600080fd5b506120198a828b01611ac2565b909550935061202d90508960608a01611d10565b915060a088013561203d81611a55565b8091505092959891949750929550565b6000806000806000806080878903121561206657600080fd5b86356001600160401b038082111561207d57600080fd5b6120898a838b01611ac2565b909850965086915061209d60208a01611a3c565b955060408901359150808211156120b357600080fd5b506120c089828a01611ac2565b90945092506120d3905060608801611e03565b90509295509295509295565b6000606082840312156120f157600080fd5b61181d8383611aaa565b600181811c9082168061210f57607f821691505b602082108103611abc57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156121675761216761212f565b60405290565b604080519081016001600160401b03811182821017156121675761216761212f565b604051601f8201601f191681016001600160401b03811182821017156121b7576121b761212f565b604052919050565b600082601f8301126121d057600080fd5b81356001600160401b038111156121e9576121e961212f565b6121fc601f8201601f191660200161218f565b81815284602083860101111561221157600080fd5b816020850160208301376000918101602001919091529392505050565b60006001600160401b03808411156122485761224861212f565b8360051b602061225981830161218f565b86815291850191818101903684111561227157600080fd5b865b848110156122f75780358681111561228b5760008081fd5b8801606036829003121561229f5760008081fd5b6122a7612145565b6122b082611a3c565b81526122bd868301611bf0565b86820152604080830135898111156122d55760008081fd5b6122e1368286016121bf565b9183019190915250845250918301918301612273565b50979650505050505050565b6000808585111561231357600080fd5b8386111561232057600080fd5b5050820193919092039150565b6000845161233f818460208901611c35565b8201838582376000930192835250909392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60006020828403121561239657600080fd5b815161181d81611a55565b600082516123b3818460208701611c35565b9190910192915050565b6000604082840312156123cf57600080fd5b6123d761216d565b82358152602083013560208201528091505092915050565b60006080823603121561240157600080fd5b604051608081016001600160401b0382821081831117156124245761242461212f565b816040528435915060ff8216821461243b57600080fd5b818352602085013560208401526040850135915061245882611a55565b816040840152606085013591508082111561247257600080fd5b5061247f368286016121bf565b60608301525092915050565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a060808401526124c160e0840182611c59565b90506060850151603f198483030160a08501526124de8282611c59565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b60006040828403121561251657600080fd5b61251e61216d565b9050815181526020820151602082015292915050565b60006040828403121561254657600080fd5b61181d8383612504565b634e487b7160e01b600052603260045260246000fd5b601f8211156125b2576000816000526020600020601f850160051c8101602086101561258f5750805b601f850160051c820191505b818110156125ae5782815560010161259b565b5050505b505050565b81516001600160401b038111156125d0576125d061212f565b6125e4816125de84546120fb565b84612566565b602080601f83116001811461261957600084156126015750858301515b600019600386901b1c1916600185901b1785556125ae565b600085815260208120601f198616915b8281101561264857888601518255948401946001909101908401612629565b50858210156126665787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b838110156126f357888303603f190185528151805163ffffffff1684528781015161ffff168885015286015160608785018190526126df81860183611c59565b96890196945050509086019060010161269f565b509098975050505050505050565b60ff818116838216019081111561081a57634e487b7160e01b600052601160045260246000fd5b8035602083101561081a57600019602084900360031b1b1692915050565b6bffffffffffffffffffffffff1981358181169160148510156127735780818660140360031b1b83161692505b505092915050565b60006080828403121561278d57600080fd5b612795612145565b8251815260208301516001600160401b03811681146127b357600080fd5b60208201526127c58460408501612504565b60408201529392505050565b60ff60f81b8560f81b1681528360018201526bffffffffffffffffffffffff198360601b16602182015260008251612810816035850160208701611c35565b919091016035019594505050505056fea26469706673582212205ee3ad31d8292b66c3cb4774204fb05a05b406d18adcedc7fcc443a5c967a40d64736f6c63430008160033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addValidCaller(address)": {
        "params": {
          "_address": "The address to add to the valid caller list."
        }
      },
      "addValidTarget(uint32,bytes32,address)": {
        "params": {
          "_governedContract": "The governed contract address.",
          "_originCaller": "The origin caller address (as bytes32).",
          "_srcEid": "The source endpoint ID."
        }
      },
      "allowInitializePath((uint32,bytes32,uint64))": {
        "details": "This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.",
        "params": {
          "origin": "The origin information containing the source endpoint and sender address."
        },
        "returns": {
          "_0": "Whether the path has been initialized."
        }
      },
      "combineOptions(uint32,uint16,bytes)": {
        "details": "If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.",
        "params": {
          "_eid": "The endpoint ID.",
          "_extraOptions": "Additional options passed by the caller.",
          "_msgType": "The OAPP message type."
        },
        "returns": {
          "_0": "options The combination of caller specified options AND enforced options."
        }
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "details": "_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.",
        "params": {
          "_sender": "The sender address."
        },
        "returns": {
          "_0": "isSender Is a valid sender."
        }
      },
      "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": {
        "details": "Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.",
        "params": {
          "_executor": "The address of the executor for the received message.",
          "_extraData": "Additional arbitrary data provided by the corresponding executor.",
          "_guid": "The unique identifier for the received LayerZero message.",
          "_message": "The payload of the received message.",
          "_origin": "The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."
        }
      },
      "nextNonce(uint32,bytes32)": {
        "details": "_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.",
        "returns": {
          "nonce": "The next nonce."
        }
      },
      "oAppVersion()": {
        "returns": {
          "receiverVersion": "The version of the OAppReceiver.sol implementation.",
          "senderVersion": "The version of the OAppSender.sol implementation."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeValidCaller(address)": {
        "params": {
          "_address": "The address to remove from the valid caller list."
        }
      },
      "removeValidTarget(uint32,bytes32,address)": {
        "params": {
          "_governedContract": "The governed contract address.",
          "_originCaller": "The origin caller address (as bytes32).",
          "_srcEid": "The source endpoint ID."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setDelegate(address)": {
        "details": "Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.",
        "params": {
          "_delegate": "The address of the delegate to be set."
        }
      },
      "setEnforcedOptions((uint32,uint16,bytes)[])": {
        "details": "Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().",
        "params": {
          "_enforcedOptions": "An array of EnforcedOptionParam structures specifying enforced options."
        }
      },
      "setPeer(uint32,bytes32)": {
        "details": "Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.",
        "params": {
          "_eid": "The endpoint ID.",
          "_peer": "The address of the peer to be associated with the corresponding endpoint."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addValidCaller(address)": {
        "notice": "Adds an address to the valid caller list."
      },
      "addValidTarget(uint32,bytes32,address)": {
        "notice": "Adds a specific (srcEid, originCaller, governedContract) combination to the valid target list."
      },
      "allowInitializePath((uint32,bytes32,uint64))": {
        "notice": "Checks if the path initialization is allowed based on the provided origin."
      },
      "combineOptions(uint32,uint16,bytes)": {
        "notice": "Combines options for a given endpoint and message type."
      },
      "endpoint()": {
        "notice": "Retrieves the LayerZero endpoint associated with the OApp."
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "notice": "Indicates whether an address is an approved composeMsg sender to the Endpoint."
      },
      "nextNonce(uint32,bytes32)": {
        "notice": "Retrieves the next nonce for a given source endpoint and sender address."
      },
      "oAppVersion()": {
        "notice": "Retrieves the OApp version information."
      },
      "peers(uint32)": {
        "notice": "Retrieves the peer (OApp) associated with a corresponding endpoint."
      },
      "removeValidCaller(address)": {
        "notice": "Removes an address from the valid caller list."
      },
      "removeValidTarget(uint32,bytes32,address)": {
        "notice": "Removes a specific (srcEid, originCaller, governedContract) combination from the valid target list."
      },
      "setDelegate(address)": {
        "notice": "Sets the delegate address for the OApp."
      },
      "setPeer(uint32,bytes32)": {
        "notice": "Sets the peer address (OApp instance) for a corresponding endpoint."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1686,
        "contract": "contracts/GovernanceControllerOApp.sol:GovernanceControllerOApp",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 938,
        "contract": "contracts/GovernanceControllerOApp.sol:GovernanceControllerOApp",
        "label": "peers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 1534,
        "contract": "contracts/GovernanceControllerOApp.sol:GovernanceControllerOApp",
        "label": "enforcedOptions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))"
      },
      {
        "astId": 2443,
        "contract": "contracts/GovernanceControllerOApp.sol:GovernanceControllerOApp",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2550,
        "contract": "contracts/GovernanceControllerOApp.sol:GovernanceControllerOApp",
        "label": "messageOrigin",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(GovernanceOrigin)3366_storage"
      },
      {
        "astId": 2566,
        "contract": "contracts/GovernanceControllerOApp.sol:GovernanceControllerOApp",
        "label": "validCallers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2574,
        "contract": "contracts/GovernanceControllerOApp.sol:GovernanceControllerOApp",
        "label": "validTargets",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint32,t_mapping(t_bytes32,t_mapping(t_address,t_bool)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_mapping(t_bytes32,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bytes32 => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(uint16 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bytes_storage)"
      },
      "t_struct(GovernanceOrigin)3366_storage": {
        "encoding": "inplace",
        "label": "struct GovernanceOrigin",
        "members": [
          {
            "astId": 3363,
            "contract": "contracts/GovernanceControllerOApp.sol:GovernanceControllerOApp",
            "label": "eid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3365,
            "contract": "contracts/GovernanceControllerOApp.sol:GovernanceControllerOApp",
            "label": "caller",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}